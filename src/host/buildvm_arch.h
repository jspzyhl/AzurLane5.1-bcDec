/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.4.0, DynASM x86 version 1.4.0
** DO NOT EDIT! The original file is in "vm_x86.dasc".
*/

#if DASM_VERSION != 10400
#error "Version mismatch between DynASM and included encoding engine"
#endif
#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned char build_actionlist[14112] = {
  254,1,248,10,252,247,198,237,15,132,244,11,131,230,252,248,41,252,242,141,
  76,49,252,248,139,114,252,252,199,68,10,4,237,248,12,131,192,1,15,132,244,
  13,137,68,36,20,252,247,198,237,15,132,244,14,248,15,129,252,246,239,252,
  247,198,237,15,133,244,10,199,131,233,237,131,230,252,248,41,214,252,247,
  222,131,232,1,15,132,244,248,248,1,255,139,44,10,137,106,252,248,139,108,
  10,4,137,106,252,252,131,194,8,131,232,1,15,133,244,1,248,2,139,108,36,64,
  137,181,233,248,3,139,68,36,20,139,76,36,72,248,4,57,193,15,133,244,252,248,
  5,131,252,234,8,137,149,233,248,16,139,76,36,68,137,141,233,49,192,248,17,
  131,196,36,100,143,5,0,0,0,0,95,91,94,95,93,195,248,6,15,130,244,253,59,149,
  233,15,135,244,254,255,199,66,252,252,237,131,194,8,131,192,1,252,233,244,
  4,248,7,133,201,15,132,244,5,41,193,141,20,202,252,233,244,5,248,8,137,149,
  233,137,68,36,20,137,202,137,252,233,232,251,1,0,139,149,233,252,233,244,
  3,248,13,176,235,252,233,244,18,248,19,137,208,137,204,141,76,36,36,100,137,
  13,0,0,0,0,248,18,255,139,108,36,64,139,173,233,199,133,233,237,252,233,244,
  17,248,20,248,21,129,225,239,137,204,141,76,36,36,100,137,13,0,0,0,0,248,
  22,139,108,36,64,185,252,248,252,255,252,255,252,255,184,237,139,149,233,
  139,157,233,129,195,239,139,114,252,252,199,66,252,252,237,199,131,233,237,
  252,233,244,12,248,23,255,137,12,36,82,106,0,252,255,177,233,232,251,1,1,
  137,193,139,84,36,4,195,248,24,186,237,252,233,244,248,248,25,131,232,8,252,
  233,244,247,248,26,141,68,194,252,248,248,1,15,182,142,233,131,198,4,137,
  149,233,137,133,233,137,116,36,24,137,202,248,2,137,252,233,232,251,1,0,139,
  149,233,139,133,233,139,106,252,248,41,208,193,232,3,131,192,1,139,181,233,
  139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,171,248,27,85,87,86,
  83,104,251,0,2,100,252,255,53,0,0,0,0,100,137,37,0,0,0,0,131,252,236,36,139,
  108,36,64,139,76,36,68,190,237,255,49,192,141,188,253,36,233,139,157,233,
  129,195,239,137,68,36,24,137,68,36,68,137,189,233,56,133,233,15,132,244,248,
  137,171,233,199,131,233,237,136,133,233,139,149,233,139,133,233,41,200,193,
  232,3,131,192,1,41,209,139,114,252,252,137,68,36,20,252,247,198,237,15,132,
  244,14,252,233,244,15,248,28,255,85,87,86,83,104,251,0,2,100,252,255,53,0,
  0,0,0,100,137,37,0,0,0,0,131,252,236,36,190,237,252,233,244,247,248,29,85,
  87,86,83,104,251,0,2,100,252,255,53,0,0,0,0,100,137,37,0,0,0,0,131,252,236,
  36,190,237,248,1,139,108,36,64,139,76,36,68,139,157,233,139,189,233,137,124,
  36,68,137,108,36,24,129,195,239,137,165,233,248,2,137,171,233,199,131,233,
  237,139,149,233,1,206,41,214,139,133,233,41,200,193,232,3,131,192,1,248,30,
  139,105,252,248,129,121,253,252,252,239,15,133,244,31,248,32,255,137,202,
  137,114,252,252,139,181,233,139,14,15,182,252,233,15,182,205,131,198,4,252,
  255,36,171,248,33,85,87,86,83,104,251,0,2,100,252,255,53,0,0,0,0,100,137,
  37,0,0,0,0,131,252,236,36,139,108,36,64,139,68,36,72,139,76,36,68,139,84,
  36,76,137,108,36,24,139,189,233,43,189,233,139,157,233,199,68,36,76,0,0,0,
  0,137,124,36,72,129,195,239,137,68,36,8,137,76,36,4,137,44,36,139,189,233,
  137,124,36,68,137,165,233,137,171,233,252,255,210,133,192,15,132,244,16,137,
  193,190,237,252,233,244,2,248,11,1,209,131,230,252,248,137,213,41,252,242,
  199,68,193,252,252,237,137,200,139,117,252,244,139,77,252,240,131,252,249,
  1,15,134,244,247,139,122,252,248,139,191,233,255,139,191,233,252,255,225,
  248,1,15,132,244,34,41,213,193,252,237,3,141,69,252,255,252,233,244,35,248,
  36,15,182,78,252,255,131,252,237,16,141,12,202,41,252,233,15,132,244,37,252,
  247,217,193,252,233,3,137,76,36,8,139,72,4,139,0,137,77,4,137,69,0,137,108,
  36,4,252,233,244,38,248,39,137,68,36,16,199,68,36,20,237,141,68,36,16,128,
  126,252,252,235,15,133,244,247,141,139,233,137,41,199,65,4,237,137,205,252,
  233,244,248,248,40,255,15,182,70,252,254,252,242,15,42,192,252,242,15,17,
  68,36,16,141,68,36,16,252,233,244,247,248,41,15,182,70,252,254,141,4,194,
  248,1,15,182,110,252,255,141,44,252,234,248,2,137,108,36,4,139,108,36,64,
  137,68,36,8,137,44,36,137,149,233,137,116,36,24,232,251,1,3,139,149,233,133,
  192,15,132,244,249,248,37,15,182,78,252,253,139,104,4,139,0,137,108,202,4,
  137,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,
  248,3,139,141,233,137,113,252,244,141,177,233,41,214,139,105,252,248,184,
  237,252,233,244,32,248,42,137,252,233,137,213,137,194,232,251,1,4,15,182,
  78,252,253,137,252,234,133,192,15,133,244,43,255,199,68,202,4,237,252,233,
  244,44,248,45,137,68,36,16,199,68,36,20,237,141,68,36,16,128,126,252,252,
  235,15,133,244,247,141,139,233,137,41,199,65,4,237,137,205,252,233,244,248,
  248,46,15,182,70,252,254,252,242,15,42,192,252,242,15,17,68,36,16,141,68,
  36,16,252,233,244,247,248,47,15,182,70,252,254,141,4,194,248,1,15,182,110,
  252,255,141,44,252,234,248,2,137,108,36,4,139,108,36,64,137,68,36,8,137,44,
  36,137,149,233,255,137,116,36,24,232,251,1,5,139,149,233,133,192,15,132,244,
  249,15,182,78,252,253,139,108,202,4,139,12,202,137,104,4,137,8,248,48,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,3,139,141,
  233,137,113,252,244,15,182,70,252,253,139,108,194,4,139,4,194,137,105,20,
  137,65,16,141,177,233,41,214,139,105,252,248,184,237,252,233,244,32,248,49,
  139,76,36,64,137,108,36,4,137,213,137,68,36,8,137,12,36,137,145,233,137,116,
  36,24,232,251,1,6,15,182,78,252,253,137,252,234,252,233,244,50,248,51,15,
  182,110,252,252,141,4,194,141,12,202,137,108,36,12,139,108,36,64,137,68,36,
  8,137,76,36,4,137,44,36,137,149,233,137,116,36,24,232,251,1,7,248,3,139,149,
  233,131,252,248,1,15,135,244,52,248,4,255,141,118,4,15,130,244,252,248,5,
  15,183,70,252,254,141,180,253,134,233,248,6,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,171,248,53,131,198,4,129,120,253,4,239,15,130,
  244,5,252,233,244,6,248,54,129,120,253,4,239,252,233,244,4,248,55,131,252,
  238,4,137,108,36,12,139,108,36,64,137,68,36,8,137,76,36,4,137,44,36,137,149,
  233,137,116,36,24,232,251,1,8,252,233,244,3,248,56,255,131,252,238,4,139,
  108,36,64,137,149,233,137,252,233,139,86,252,252,137,116,36,24,232,251,1,
  9,252,233,244,3,248,57,15,183,70,252,254,137,76,36,4,139,108,36,64,137,68,
  36,8,137,44,36,137,149,233,137,116,36,24,232,251,1,10,139,149,233,252,233,
  244,6,248,58,248,59,141,4,199,252,233,244,247,248,60,248,61,141,4,199,141,
  44,252,234,149,252,233,244,248,248,62,141,4,194,137,197,252,233,244,248,248,
  63,248,64,255,141,4,194,248,1,141,44,252,234,248,2,141,12,202,137,108,36,
  8,139,108,36,64,137,68,36,12,15,182,70,252,252,137,76,36,4,137,68,36,16,137,
  44,36,137,149,233,137,116,36,24,232,251,1,11,139,149,233,133,192,15,132,244,
  48,248,52,137,193,41,208,137,113,252,244,141,176,233,184,237,252,233,244,
  30,248,65,139,108,36,64,137,149,233,141,20,194,137,252,233,137,116,36,24,
  232,251,1,12,139,149,233,255,133,192,15,133,244,52,15,183,70,252,254,139,
  12,194,252,233,244,66,255,252,233,244,52,255,248,67,141,76,202,8,248,31,137,
  76,36,20,137,68,36,16,131,252,233,8,141,4,193,139,108,36,64,137,76,36,4,137,
  68,36,8,137,44,36,137,149,233,137,116,36,24,232,251,1,13,139,149,233,139,
  76,36,20,139,68,36,16,139,105,252,248,131,192,1,57,215,15,132,244,68,137,
  202,137,114,252,252,139,181,233,139,14,15,182,252,233,15,182,205,131,198,
  4,252,255,36,171,248,69,139,108,36,64,137,149,233,137,202,137,252,233,137,
  116,36,24,232,251,1,14,139,149,233,139,70,252,252,15,182,204,15,182,232,193,
  232,16,252,255,164,253,171,233,248,70,129,252,248,239,15,130,244,71,139,106,
  4,129,252,253,239,15,131,244,71,139,114,252,252,137,68,36,20,137,106,252,
  252,139,42,137,106,252,248,131,232,2,15,132,244,248,255,137,209,248,1,131,
  193,8,139,105,4,137,105,252,252,139,41,137,105,252,248,131,232,1,15,133,244,
  1,248,2,139,68,36,20,252,233,244,72,248,73,129,252,248,239,15,130,244,71,
  139,106,4,184,237,252,247,213,57,232,15,71,197,248,2,139,106,252,248,139,
  132,253,197,233,139,114,252,252,199,66,252,252,237,137,66,252,248,252,233,
  244,74,248,75,129,252,248,239,15,130,244,71,255,139,106,4,139,114,252,252,
  129,252,253,239,15,133,244,252,248,1,139,42,139,173,233,248,2,133,252,237,
  199,66,252,252,237,15,132,244,74,139,131,233,199,66,252,252,237,137,106,252,
  248,139,141,233,35,136,233,105,201,239,3,141,233,248,3,129,185,233,239,15,
  133,244,250,255,57,129,233,15,132,244,251,248,4,139,137,233,133,201,15,133,
  244,3,252,233,244,74,248,5,139,105,4,129,252,253,239,15,132,244,74,139,1,
  137,106,252,252,137,66,252,248,252,233,244,74,248,6,129,252,253,239,15,132,
  244,1,255,129,252,253,239,15,135,244,254,189,237,248,8,252,247,213,139,172,
  253,171,233,252,233,244,2,248,76,129,252,248,239,15,130,244,71,129,122,253,
  4,239,15,133,244,71,139,42,131,189,233,0,15,133,244,71,129,122,253,12,239,
  255,15,133,244,71,139,66,8,137,133,233,139,114,252,252,199,66,252,252,237,
  137,106,252,248,252,246,133,233,235,15,132,244,247,128,165,233,235,139,131,
  233,137,171,233,137,133,233,248,1,252,233,244,74,248,77,129,252,248,239,15,
  130,244,71,255,129,122,253,4,239,15,133,244,71,139,2,139,108,36,64,137,68,
  36,4,137,44,36,137,213,131,194,8,137,84,36,8,232,251,1,15,137,252,234,139,
  40,139,64,4,139,114,252,252,137,106,252,248,137,66,252,252,252,233,244,74,
  248,78,129,252,248,239,15,133,244,71,129,122,253,4,239,15,131,244,71,252,
  242,15,16,2,252,233,244,79,248,80,129,252,248,239,15,130,244,71,139,114,252,
  252,129,122,253,4,239,255,15,133,244,249,139,2,248,2,199,66,252,252,237,137,
  66,252,248,252,233,244,74,248,3,129,122,253,4,239,15,135,244,71,131,187,233,
  0,15,133,244,71,139,171,233,59,171,233,15,130,244,247,232,244,81,248,1,255,
  139,108,36,64,137,149,233,137,116,36,24,137,252,233,232,251,1,16,139,149,
  233,252,233,244,2,248,82,129,252,248,239,15,130,244,71,15,132,244,248,248,
  1,129,122,253,4,239,15,133,244,71,139,108,36,64,137,149,233,137,149,233,139,
  114,252,252,139,2,137,68,36,4,137,44,36,131,194,8,137,84,36,8,137,116,36,
  24,232,251,1,17,139,149,233,133,192,15,132,244,249,255,139,106,8,139,66,12,
  137,106,252,248,137,66,252,252,139,106,16,139,66,20,137,42,137,66,4,248,83,
  184,237,252,233,244,84,248,2,199,66,12,237,252,233,244,1,248,3,199,66,252,
  252,237,252,233,244,74,248,85,129,252,248,239,15,130,244,71,139,42,129,122,
  253,4,239,15,133,244,71,255,131,189,233,0,15,133,244,71,255,139,106,252,248,
  139,133,233,139,114,252,252,199,66,252,252,237,137,66,252,248,199,66,12,237,
  184,237,252,233,244,84,248,86,129,252,248,239,15,130,244,71,129,122,253,4,
  239,15,133,244,71,129,122,253,12,239,15,131,244,71,139,114,252,252,252,242,
  15,16,66,8,189,0,0,252,240,63,102,15,110,205,102,15,112,201,81,252,242,15,
  88,193,252,242,15,44,192,252,242,15,17,66,252,248,139,42,59,133,233,15,131,
  244,248,255,193,224,3,3,133,233,248,1,129,120,253,4,239,15,132,244,87,139,
  40,139,64,4,137,42,137,66,4,252,233,244,83,248,2,131,189,233,0,15,132,244,
  87,137,252,233,137,213,137,194,232,251,1,4,137,252,234,133,192,15,133,244,
  1,248,87,184,237,252,233,244,84,248,88,129,252,248,239,255,139,106,252,248,
  139,133,233,139,114,252,252,199,66,252,252,237,137,66,252,248,15,87,192,252,
  242,15,17,66,8,184,237,252,233,244,84,248,89,129,252,248,239,15,130,244,71,
  141,74,8,131,232,1,190,237,248,1,15,182,171,233,193,252,237,235,131,229,1,
  1,252,238,252,233,244,30,248,90,129,252,248,239,15,130,244,71,255,129,122,
  253,12,239,15,133,244,71,139,106,4,137,106,12,199,66,4,237,139,42,139,114,
  8,137,106,8,137,50,141,74,16,131,232,2,190,237,252,233,244,1,248,91,129,252,
  248,239,15,130,244,71,139,42,139,114,252,252,137,116,36,24,137,44,36,129,
  122,253,4,239,15,133,244,71,131,189,233,0,15,133,244,71,128,189,233,235,255,
  15,135,244,71,139,141,233,15,132,244,247,59,141,233,15,132,244,71,248,1,141,
  116,193,252,240,59,181,233,15,135,244,71,137,181,233,139,108,36,64,137,149,
  233,131,194,8,137,149,233,141,108,194,232,41,252,245,57,206,15,132,244,249,
  248,2,139,68,46,4,137,70,252,252,139,4,46,137,70,252,248,131,252,238,8,57,
  206,15,133,244,2,248,3,255,137,76,36,4,49,201,137,76,36,12,137,76,36,8,232,
  244,27,139,108,36,64,139,52,36,139,149,233,137,171,233,199,131,233,237,129,
  252,248,239,15,135,244,254,248,4,139,142,233,139,190,233,137,142,233,137,
  252,254,41,206,15,132,244,252,141,4,50,193,252,238,3,59,133,233,15,135,244,
  255,137,213,41,205,248,5,255,139,1,137,4,41,139,65,4,137,68,41,4,131,193,
  8,57,252,249,15,133,244,5,248,6,141,70,2,199,66,252,252,237,248,7,139,116,
  36,24,137,68,36,20,185,252,248,252,255,252,255,252,255,252,247,198,237,15,
  132,244,14,252,233,244,15,248,8,199,66,252,252,237,139,142,233,131,252,233,
  8,137,142,233,139,1,137,2,139,65,4,137,66,4,184,237,252,233,244,7,248,9,139,
  12,36,137,185,233,255,137,252,242,137,252,233,232,251,1,0,139,52,36,139,149,
  233,252,233,244,4,248,92,139,106,252,248,139,173,233,139,114,252,252,137,
  116,36,24,137,44,36,131,189,233,0,15,133,244,71,128,189,233,235,15,135,244,
  71,139,141,233,15,132,244,247,59,141,233,15,132,244,71,248,1,255,141,116,
  193,252,248,59,181,233,15,135,244,71,137,181,233,139,108,36,64,137,149,233,
  137,149,233,141,108,194,252,240,41,252,245,57,206,15,132,244,249,248,2,139,
  68,46,4,137,70,252,252,139,4,46,137,70,252,248,131,252,238,8,57,206,15,133,
  244,2,248,3,137,76,36,4,49,201,137,76,36,12,137,76,36,8,232,244,27,139,108,
  36,64,139,52,36,139,149,233,137,171,233,199,131,233,237,129,252,248,239,255,
  15,135,244,254,248,4,139,142,233,139,190,233,137,142,233,137,252,254,41,206,
  15,132,244,252,141,4,50,193,252,238,3,59,133,233,15,135,244,255,137,213,41,
  205,248,5,139,1,137,4,41,139,65,4,137,68,41,4,131,193,8,57,252,249,15,133,
  244,5,248,6,141,70,1,248,7,139,116,36,24,137,68,36,20,49,201,252,247,198,
  237,15,132,244,14,255,252,233,244,15,248,8,137,252,242,137,252,233,232,251,
  1,18,248,9,139,12,36,137,185,233,137,252,242,137,252,233,232,251,1,0,139,
  52,36,139,149,233,252,233,244,4,248,93,139,108,36,64,252,247,133,233,237,
  15,132,244,71,137,149,233,141,68,194,252,248,137,133,233,49,192,137,133,233,
  176,235,136,133,233,252,233,244,17,248,94,248,95,255,139,114,252,252,221,
  90,252,248,252,233,244,74,248,96,129,252,248,239,15,130,244,71,129,122,253,
  4,239,15,131,244,71,252,242,15,16,2,102,15,252,239,201,102,15,118,201,102,
  15,115,209,1,15,84,193,248,79,139,114,252,252,252,242,15,17,66,252,248,248,
  74,184,237,248,84,137,68,36,20,248,72,252,247,198,237,15,133,244,253,248,
  5,56,70,252,255,15,135,244,252,255,15,182,78,252,253,252,247,209,141,20,202,
  139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,6,199,
  68,194,252,244,237,131,192,1,252,233,244,5,248,7,185,252,248,252,255,252,
  255,252,255,252,233,244,15,248,97,129,122,253,4,239,15,131,244,71,252,242,
  15,16,2,232,244,98,252,233,244,79,248,99,129,122,253,4,239,15,131,244,71,
  255,252,242,15,16,2,232,244,100,252,233,244,79,248,101,129,252,248,239,15,
  130,244,71,129,122,253,4,239,15,131,244,71,252,242,15,81,2,252,233,244,79,
  248,102,129,252,248,239,15,133,244,71,129,122,253,4,239,15,131,244,71,255,
  252,242,15,16,2,252,242,15,17,4,36,137,213,232,251,1,19,137,252,234,252,233,
  244,95,248,103,129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,244,
  71,252,242,15,16,2,252,242,15,17,4,36,137,213,232,251,1,20,137,252,234,252,
  233,244,95,248,104,129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,
  244,71,252,242,15,16,2,252,242,15,17,4,36,137,213,232,251,1,21,137,252,234,
  252,233,244,95,248,105,255,129,252,248,239,15,130,244,71,129,122,253,4,239,
  15,131,244,71,252,242,15,16,2,252,242,15,17,4,36,137,213,232,251,1,22,137,
  252,234,252,233,244,95,248,106,129,252,248,239,15,130,244,71,129,122,253,
  4,239,15,131,244,71,252,242,15,16,2,252,242,15,17,4,36,137,213,232,251,1,
  23,137,252,234,252,233,244,95,248,107,129,252,248,239,255,15,130,244,71,129,
  122,253,4,239,15,131,244,71,252,242,15,16,2,252,242,15,17,4,36,137,213,232,
  251,1,24,137,252,234,252,233,244,95,248,108,129,252,248,239,15,130,244,71,
  129,122,253,4,239,15,131,244,71,252,242,15,16,2,252,242,15,17,4,36,137,213,
  232,251,1,25,137,252,234,252,233,244,95,248,109,129,252,248,239,15,130,244,
  71,255,129,122,253,4,239,15,131,244,71,252,242,15,16,2,252,242,15,17,4,36,
  137,213,232,251,1,26,137,252,234,252,233,244,95,248,110,129,252,248,239,15,
  130,244,71,129,122,253,4,239,15,131,244,71,252,242,15,16,2,252,242,15,17,
  4,36,137,213,232,251,1,27,137,252,234,252,233,244,95,248,111,129,252,248,
  239,15,130,244,71,129,122,253,4,239,255,15,131,244,71,252,242,15,16,2,252,
  242,15,17,4,36,137,213,232,251,1,28,137,252,234,252,233,244,95,248,112,129,
  252,248,239,15,130,244,71,129,122,253,4,239,15,131,244,71,252,242,15,16,2,
  252,242,15,17,4,36,137,213,232,251,1,29,137,252,234,252,233,244,95,248,113,
  129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,244,71,255,252,242,
  15,16,2,252,242,15,17,4,36,137,213,232,251,1,30,137,252,234,252,233,244,95,
  248,114,129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,244,71,129,
  122,253,12,239,15,131,244,71,252,242,15,16,2,252,242,15,16,74,8,252,242,15,
  17,4,36,252,242,15,17,76,36,8,137,213,232,251,1,31,137,252,234,252,233,244,
  95,248,115,129,252,248,239,15,130,244,71,129,122,253,4,239,255,15,131,244,
  71,129,122,253,12,239,15,131,244,71,252,242,15,16,2,252,242,15,16,74,8,252,
  242,15,17,4,36,252,242,15,17,76,36,8,137,213,232,251,1,32,137,252,234,252,
  233,244,95,248,116,129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,
  244,71,129,122,253,12,239,15,131,244,71,252,242,15,16,2,252,242,15,16,74,
  8,252,242,15,17,4,36,252,242,15,17,76,36,8,137,213,232,251,1,33,137,252,234,
  252,233,244,95,248,117,255,129,252,248,239,15,130,244,71,129,122,253,4,239,
  15,131,244,71,129,122,253,12,239,15,131,244,71,221,66,8,221,2,217,252,253,
  221,217,252,233,244,95,248,118,129,252,248,239,15,130,244,71,139,106,4,129,
  252,253,239,15,131,244,71,139,114,252,252,139,2,137,106,252,252,137,66,252,
  248,209,229,129,252,253,0,0,224,252,255,15,131,244,249,255,9,232,15,132,244,
  249,184,252,254,3,0,0,129,252,253,0,0,32,0,15,130,244,250,248,1,193,252,237,
  21,41,197,252,242,15,42,197,139,106,252,252,129,229,252,255,252,255,15,128,
  129,205,0,0,224,63,137,106,252,252,248,2,252,242,15,17,2,184,237,252,233,
  244,84,248,3,15,87,192,252,233,244,2,248,4,252,242,15,16,2,189,0,0,80,67,
  102,15,110,205,102,15,112,201,81,252,242,15,89,193,252,242,15,17,66,252,248,
  139,106,252,252,184,52,4,0,0,209,229,252,233,244,1,248,119,129,252,248,239,
  15,130,244,71,255,129,122,253,4,239,15,131,244,71,252,242,15,16,2,139,106,
  4,139,114,252,252,209,229,129,252,253,0,0,224,252,255,15,132,244,250,15,40,
  224,232,244,120,252,242,15,92,224,248,1,252,242,15,17,66,252,248,252,242,
  15,17,34,139,66,252,252,139,106,4,49,232,15,136,244,249,248,2,184,237,252,
  233,244,84,248,3,129,252,245,0,0,0,128,137,106,4,252,233,244,2,248,4,15,87,
  228,252,233,244,1,248,121,255,185,2,0,0,0,129,122,253,4,239,15,131,244,71,
  252,242,15,16,2,248,5,57,193,15,131,244,79,129,124,253,202,252,252,239,15,
  131,244,71,248,6,252,242,15,16,76,202,252,248,248,7,252,242,15,93,193,131,
  193,1,252,233,244,5,248,122,185,2,0,0,0,129,122,253,4,239,15,131,244,71,252,
  242,15,16,2,248,5,57,193,15,131,244,79,255,129,124,253,202,252,252,239,15,
  131,244,71,248,6,252,242,15,16,76,202,252,248,248,7,252,242,15,95,193,131,
  193,1,252,233,244,5,248,123,129,252,248,239,15,133,244,71,129,122,253,4,239,
  15,133,244,71,139,42,139,114,252,252,131,189,233,1,15,130,244,87,15,182,173,
  233,252,242,15,42,197,252,233,244,79,248,124,255,139,171,233,59,171,233,15,
  130,244,247,232,244,81,248,1,129,252,248,239,15,133,244,71,129,122,253,4,
  239,15,131,244,71,252,242,15,44,42,129,252,253,252,255,0,0,0,15,135,244,71,
  137,108,36,20,199,68,36,8,1,0,0,0,141,68,36,20,248,125,139,108,36,64,137,
  149,233,137,68,36,4,137,44,36,137,116,36,24,232,251,1,34,248,126,139,149,
  233,255,139,114,252,252,199,66,252,252,237,137,66,252,248,252,233,244,74,
  248,127,139,171,233,59,171,233,15,130,244,247,232,244,81,248,1,199,68,36,
  20,252,255,252,255,252,255,252,255,129,252,248,239,15,130,244,71,15,134,244,
  247,129,122,253,20,239,15,131,244,71,255,252,242,15,44,106,16,137,108,36,
  20,248,1,129,122,253,4,239,15,133,244,71,129,122,253,12,239,15,131,244,71,
  139,42,137,108,36,12,139,173,233,252,242,15,44,74,8,139,68,36,20,57,197,15,
  130,244,251,248,2,133,201,15,142,244,253,248,3,139,108,36,12,41,200,15,140,
  244,128,141,172,253,13,233,131,192,1,248,4,137,68,36,8,137,232,252,233,244,
  125,248,5,255,15,140,244,252,141,68,40,1,252,233,244,2,248,6,137,232,252,
  233,244,2,248,7,15,132,244,254,1,252,233,131,193,1,15,143,244,3,248,8,185,
  1,0,0,0,252,233,244,3,248,128,49,192,252,233,244,4,248,129,255,129,252,248,
  239,15,130,244,71,139,171,233,59,171,233,15,130,244,247,232,244,81,248,1,
  129,122,253,4,239,15,133,244,71,139,108,36,64,141,139,233,137,149,233,139,
  18,139,129,233,137,169,233,137,129,233,137,116,36,24,232,251,1,35,137,193,
  232,251,1,36,252,233,244,126,248,130,255,129,252,248,239,15,130,244,71,139,
  171,233,59,171,233,15,130,244,247,232,244,81,248,1,129,122,253,4,239,15,133,
  244,71,139,108,36,64,141,139,233,137,149,233,139,18,139,129,233,137,169,233,
  137,129,233,137,116,36,24,232,251,1,37,137,193,232,251,1,36,252,233,244,126,
  248,131,255,129,252,248,239,15,130,244,71,139,171,233,59,171,233,15,130,244,
  247,232,244,81,248,1,129,122,253,4,239,15,133,244,71,139,108,36,64,141,139,
  233,137,149,233,139,18,139,129,233,137,169,233,137,129,233,137,116,36,24,
  232,251,1,38,137,193,232,251,1,36,252,233,244,126,248,132,255,129,252,248,
  239,15,130,244,71,129,122,253,4,239,15,131,244,71,252,242,15,16,2,189,0,0,
  56,67,102,15,110,205,102,15,112,201,81,252,242,15,88,193,102,15,126,197,248,
  2,252,233,244,133,248,134,129,252,248,239,15,130,244,71,189,0,0,56,67,102,
  15,110,205,102,15,112,201,81,129,122,253,4,239,15,131,244,71,252,242,15,16,
  2,252,242,15,88,193,102,15,126,197,248,2,137,68,36,20,141,68,194,252,240,
  248,1,57,208,15,134,244,133,255,129,120,253,4,239,15,131,244,135,252,242,
  15,16,0,252,242,15,88,193,102,15,126,193,33,205,131,232,8,252,233,244,1,248,
  136,129,252,248,239,15,130,244,71,189,0,0,56,67,102,15,110,205,102,15,112,
  201,81,129,122,253,4,239,15,131,244,71,252,242,15,16,2,252,242,15,88,193,
  102,15,126,197,248,2,137,68,36,20,141,68,194,252,240,248,1,57,208,15,134,
  244,133,129,120,253,4,239,15,131,244,135,255,252,242,15,16,0,252,242,15,88,
  193,102,15,126,193,9,205,131,232,8,252,233,244,1,248,137,129,252,248,239,
  15,130,244,71,189,0,0,56,67,102,15,110,205,102,15,112,201,81,129,122,253,
  4,239,15,131,244,71,252,242,15,16,2,252,242,15,88,193,102,15,126,197,248,
  2,137,68,36,20,141,68,194,252,240,248,1,57,208,15,134,244,133,129,120,253,
  4,239,15,131,244,135,252,242,15,16,0,252,242,15,88,193,102,15,126,193,49,
  205,131,232,8,252,233,244,1,248,138,255,129,252,248,239,15,130,244,71,129,
  122,253,4,239,15,131,244,71,252,242,15,16,2,189,0,0,56,67,102,15,110,205,
  102,15,112,201,81,252,242,15,88,193,102,15,126,197,248,2,15,205,252,233,244,
  133,248,139,129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,244,71,
  252,242,15,16,2,189,0,0,56,67,102,15,110,205,102,15,112,201,81,252,242,15,
  88,193,102,15,126,197,248,2,252,247,213,248,133,252,242,15,42,197,252,233,
  244,79,248,135,255,139,68,36,20,252,233,244,71,248,140,129,252,248,239,15,
  130,244,71,129,122,253,4,239,15,131,244,71,129,122,253,12,239,15,131,244,
  71,252,242,15,16,2,252,242,15,16,74,8,189,0,0,56,67,102,15,110,213,102,15,
  112,210,81,252,242,15,88,194,252,242,15,88,202,102,15,126,197,102,15,126,
  201,211,229,252,233,244,133,248,141,129,252,248,239,15,130,244,71,129,122,
  253,4,239,255,15,131,244,71,129,122,253,12,239,15,131,244,71,252,242,15,16,
  2,252,242,15,16,74,8,189,0,0,56,67,102,15,110,213,102,15,112,210,81,252,242,
  15,88,194,252,242,15,88,202,102,15,126,197,102,15,126,201,211,252,237,252,
  233,244,133,248,142,129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,
  244,71,129,122,253,12,239,15,131,244,71,252,242,15,16,2,252,242,15,16,74,
  8,189,0,0,56,67,102,15,110,213,102,15,112,210,81,252,242,15,88,194,252,242,
  15,88,202,102,15,126,197,102,15,126,201,211,252,253,252,233,244,133,248,143,
  255,129,252,248,239,15,130,244,71,129,122,253,4,239,15,131,244,71,129,122,
  253,12,239,15,131,244,71,252,242,15,16,2,252,242,15,16,74,8,189,0,0,56,67,
  102,15,110,213,102,15,112,210,81,252,242,15,88,194,252,242,15,88,202,102,
  15,126,197,102,15,126,201,211,197,252,233,244,133,248,144,129,252,248,239,
  15,130,244,71,129,122,253,4,239,15,131,244,71,129,122,253,12,239,255,15,131,
  244,71,252,242,15,16,2,252,242,15,16,74,8,189,0,0,56,67,102,15,110,213,102,
  15,112,210,81,252,242,15,88,194,252,242,15,88,202,102,15,126,197,102,15,126,
  201,211,205,252,233,244,133,248,145,184,237,252,233,244,71,248,146,184,237,
  248,71,139,108,36,64,139,114,252,252,137,116,36,24,137,149,233,141,68,194,
  252,248,141,136,233,137,133,233,139,66,252,248,59,141,233,15,135,244,251,
  137,44,36,252,255,144,233,139,149,233,255,133,192,15,143,244,84,248,1,139,
  141,233,41,209,193,252,233,3,133,192,141,65,1,139,106,252,248,15,133,244,
  35,139,181,233,139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,171,
  248,35,137,209,252,247,198,237,15,133,244,249,15,182,110,252,253,252,247,
  213,141,20,252,234,252,233,244,30,248,3,137,252,245,131,229,252,248,41,252,
  234,252,233,244,30,248,5,186,237,137,252,233,232,251,1,0,139,149,233,255,
  49,192,252,233,244,1,248,81,93,137,108,36,16,139,108,36,64,137,116,36,24,
  137,149,233,141,68,194,252,248,137,252,233,137,133,233,232,251,1,39,139,149,
  233,139,133,233,41,208,193,232,3,131,192,1,139,108,36,16,85,195,248,147,15,
  182,131,233,168,235,15,133,244,251,168,235,15,133,244,247,168,235,15,132,
  244,247,252,255,139,233,255,252,233,244,247,248,148,15,182,131,233,168,235,
  15,133,244,251,252,233,244,247,248,149,15,182,131,233,168,235,15,133,244,
  251,168,235,15,132,244,251,252,255,139,233,15,132,244,247,255,168,235,15,
  132,244,251,248,1,139,108,36,64,137,149,233,137,252,242,137,252,233,232,251,
  1,40,248,3,139,149,233,248,4,15,182,78,252,253,248,5,15,182,110,252,252,15,
  183,70,252,254,252,255,164,253,171,233,248,150,131,198,4,139,77,232,137,76,
  36,20,252,233,244,4,248,151,139,106,252,248,139,173,233,15,182,133,233,141,
  4,194,139,108,36,64,137,149,233,137,133,233,137,252,242,141,139,233,255,137,
  171,233,137,116,36,24,232,251,1,41,252,233,244,3,248,152,137,116,36,24,252,
  233,244,247,248,153,137,116,36,24,131,206,1,248,1,141,68,194,252,248,139,
  108,36,64,137,149,233,137,133,233,137,252,242,137,252,233,232,251,1,42,199,
  68,36,24,0,0,0,0,131,230,252,254,139,149,233,137,193,139,133,233,41,208,137,
  205,15,182,78,252,253,193,232,3,131,192,1,252,255,229,248,154,139,77,232,
  137,76,36,16,137,92,36,12,139,92,36,20,15,182,78,252,253,141,12,202,131,252,
  235,1,15,132,244,248,248,1,139,40,137,41,139,104,4,137,105,4,131,192,8,131,
  193,8,131,252,235,1,15,133,244,1,248,2,255,15,182,70,252,253,15,182,110,252,
  255,1,232,141,68,194,252,248,248,3,57,200,15,135,244,255,139,92,36,12,139,
  68,36,16,15,183,168,233,15,183,128,233,57,232,15,132,244,48,133,192,15,133,
  245,137,171,233,139,108,36,64,137,149,233,137,252,242,141,139,233,137,171,
  233,232,251,1,43,139,149,233,252,233,244,48,248,9,199,65,4,237,131,193,8,
  252,233,244,3,248,155,255,139,108,36,64,137,149,233,137,252,242,137,252,233,
  232,251,1,44,139,149,233,131,252,238,4,252,233,244,48,255,248,156,85,141,
  108,36,12,85,83,82,81,80,15,182,69,252,252,138,101,252,248,137,125,252,252,
  137,117,252,248,139,93,0,139,139,233,199,131,233,237,137,131,233,137,139,
  233,129,252,236,239,252,242,15,17,125,216,252,242,15,17,117,208,252,242,15,
  17,109,200,252,242,15,17,101,192,252,242,15,17,93,184,252,242,15,17,85,176,
  252,242,15,17,77,168,252,242,15,17,69,160,139,171,233,139,147,233,137,171,
  233,137,149,233,141,84,36,16,141,139,233,199,131,233,0,0,0,0,232,251,1,45,
  139,141,233,129,225,239,137,204,137,169,233,139,149,233,139,177,233,248,157,
  255,133,192,15,136,244,255,139,108,36,64,137,68,36,20,139,122,252,248,139,
  191,233,139,191,233,137,149,233,199,131,233,0,0,0,0,199,131,233,237,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,129,252,253,239,15,130,244,249,
  129,252,253,239,15,131,244,250,248,2,139,68,36,20,248,3,252,255,36,171,248,
  4,139,66,252,252,169,237,15,133,244,2,255,15,182,64,252,253,252,247,208,139,
  124,194,252,248,139,191,233,139,191,233,252,233,244,2,248,9,252,247,216,137,
  252,233,137,194,232,251,1,46,248,158,252,242,15,16,68,36,4,232,244,98,252,
  242,15,17,68,36,4,221,68,36,4,195,248,98,102,15,252,239,210,102,15,118,210,
  102,15,115,210,1,184,0,0,48,67,102,15,110,216,102,15,112,219,81,15,40,200,
  102,15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,
  252,242,15,92,203,102,15,86,202,184,0,0,252,240,63,102,15,110,208,102,15,
  112,210,81,252,242,15,194,193,1,102,15,84,194,252,242,15,92,200,15,40,193,
  248,1,195,248,159,252,242,15,16,68,36,4,232,244,100,252,242,15,17,68,36,4,
  221,68,36,4,195,248,100,102,15,252,239,210,102,15,118,210,102,15,115,210,
  1,184,0,0,48,67,102,15,110,216,102,15,112,219,81,15,40,200,102,15,84,202,
  102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,252,242,15,92,
  203,102,15,86,202,184,0,0,252,240,191,102,15,110,208,102,15,112,210,81,252,
  242,15,194,193,6,102,15,84,194,252,242,15,92,200,15,40,193,248,1,255,195,
  248,160,252,242,15,16,68,36,4,232,244,120,252,242,15,17,68,36,4,221,68,36,
  4,195,248,120,102,15,252,239,210,102,15,118,210,102,15,115,210,1,184,0,0,
  48,67,102,15,110,216,102,15,112,219,81,15,40,200,102,15,84,202,102,15,46,
  217,15,134,244,247,102,15,85,208,15,40,193,252,242,15,88,203,252,242,15,92,
  203,184,0,0,252,240,63,102,15,110,216,102,15,112,219,81,252,242,15,194,193,
  1,102,15,84,195,252,242,15,92,200,102,15,86,202,15,40,193,248,1,195,248,161,
  15,40,232,252,242,15,94,193,102,15,252,239,210,102,15,118,210,102,15,115,
  210,1,184,0,0,48,67,102,15,110,216,102,15,112,219,81,15,40,224,102,15,84,
  226,102,15,46,220,15,134,244,247,102,15,85,208,252,242,15,88,227,252,242,
  15,92,227,102,15,86,226,184,0,0,252,240,63,102,15,110,208,102,15,112,210,
  81,252,242,15,194,196,1,102,15,84,194,252,242,15,92,224,15,40,197,252,242,
  15,89,204,252,242,15,92,193,195,248,1,252,242,15,89,200,15,40,197,252,242,
  15,92,193,195,248,162,131,252,248,1,15,142,244,252,248,1,169,1,0,0,0,15,133,
  244,248,252,242,15,89,192,209,232,252,233,244,1,248,2,255,209,232,15,132,
  244,251,15,40,200,248,3,252,242,15,89,192,209,232,15,132,244,250,15,131,244,
  3,252,242,15,89,200,252,233,244,3,248,4,252,242,15,89,193,248,5,195,248,6,
  15,132,244,5,15,130,244,253,252,247,216,232,244,1,184,0,0,252,240,63,102,
  15,110,200,102,15,112,201,81,252,242,15,94,200,15,40,193,195,248,7,255,184,
  0,0,252,240,63,102,15,110,192,102,15,112,192,81,195,248,163,156,90,137,209,
  129,252,242,0,0,32,0,82,157,156,90,49,192,57,209,15,132,244,247,139,68,36,
  4,87,83,49,201,15,162,139,124,36,16,137,7,137,95,4,137,79,8,137,87,12,91,
  95,248,1,195,248,164,255,204,255,204,248,165,131,252,236,16,87,86,83,104,
  251,0,2,100,252,255,53,0,0,0,0,100,137,37,0,0,0,0,131,252,236,36,141,157,
  233,139,181,233,15,183,192,137,134,233,141,132,253,36,233,137,142,233,137,
  150,233,137,134,233,139,140,253,36,233,139,148,253,36,233,137,76,36,60,137,
  84,36,56,137,226,137,116,36,24,137,252,241,232,251,1,47,199,131,233,237,139,
  144,233,139,128,233,41,208,139,106,252,248,193,232,3,131,192,1,139,181,233,
  139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,171,248,34,139,76,36,
  64,139,179,233,137,142,233,137,145,233,255,137,169,233,137,252,241,137,194,
  232,251,1,48,139,108,36,64,139,134,233,139,150,233,131,190,233,1,15,130,244,
  253,15,132,244,252,221,134,233,252,233,244,253,248,6,217,134,233,248,7,139,
  141,233,15,183,73,6,137,76,36,64,131,196,36,100,143,5,0,0,0,0,95,91,94,95,
  93,89,3,36,36,131,196,16,81,195,248,166,85,137,229,83,137,203,43,163,233,
  137,163,233,15,182,139,233,255,131,252,233,1,15,136,244,248,248,1,139,132,
  253,139,233,137,4,140,131,252,233,1,15,137,244,1,248,2,139,139,233,139,147,
  233,252,255,147,233,137,131,233,137,147,233,128,187,233,1,15,130,244,253,
  15,132,244,252,221,155,233,252,233,244,253,248,6,255,217,155,233,248,7,41,
  163,233,139,93,252,252,201,195,255,129,124,253,202,4,239,15,131,244,51,129,
  124,253,194,4,239,15,131,244,51,248,1,252,242,15,16,4,194,248,2,131,198,4,
  102,15,46,4,202,248,3,255,15,134,244,247,255,15,135,244,247,255,15,130,244,
  247,255,15,131,244,247,255,15,183,70,252,254,141,180,253,134,233,248,1,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,139,108,194,
  4,131,198,4,255,129,252,253,239,15,131,244,251,129,124,253,202,4,239,15,131,
  244,251,248,1,252,242,15,16,4,202,248,2,102,15,46,4,194,248,4,255,15,138,
  244,248,15,133,244,248,255,15,138,244,248,15,132,244,247,255,248,1,15,183,
  70,252,254,141,180,253,134,233,248,2,255,248,2,15,183,70,252,254,141,180,
  253,134,233,248,1,255,252,233,244,9,255,248,5,129,252,253,239,15,132,244,
  56,129,124,253,202,4,239,15,132,244,56,57,108,202,4,15,133,244,2,129,252,
  253,239,15,131,244,1,139,12,202,139,4,194,57,193,15,132,244,1,129,252,253,
  239,15,135,244,2,139,169,233,133,252,237,15,132,244,2,255,252,246,133,233,
  235,15,133,244,2,255,49,252,237,255,189,1,0,0,0,255,252,233,244,55,255,248,
  3,129,252,253,239,255,15,133,244,9,255,252,233,244,56,255,252,247,208,139,
  108,202,4,131,198,4,129,252,253,239,15,133,244,249,139,12,202,59,12,135,255,
  139,108,202,4,131,198,4,255,129,252,253,239,15,131,244,249,248,1,252,242,
  15,16,4,199,248,2,102,15,46,4,202,248,4,255,252,247,208,139,108,202,4,131,
  198,4,57,197,255,15,133,244,249,15,183,70,252,254,141,180,253,134,233,248,
  2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,3,129,
  252,253,239,15,133,244,2,252,233,244,56,255,15,132,244,248,129,252,253,239,
  15,132,244,56,15,183,70,252,254,141,180,253,134,233,248,2,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,171,255,139,108,194,4,131,198,
  4,129,252,253,239,255,137,108,202,4,139,44,194,137,44,202,255,3,68,202,4,
  15,133,244,57,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  171,255,129,124,253,202,4,239,15,131,244,57,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,171,255,139,108,194,4,139,4,194,137,108,202,4,
  137,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,
  255,49,252,237,129,124,253,194,4,239,129,213,239,137,108,202,4,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,129,124,253,194,4,
  239,15,131,244,62,252,242,15,16,4,194,184,0,0,0,128,102,15,110,200,102,15,
  112,201,81,15,87,193,252,242,15,17,4,202,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,171,255,129,124,253,194,4,239,15,133,244,248,
  139,4,194,15,87,192,252,242,15,42,128,233,248,1,252,242,15,17,4,202,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,2,129,124,253,
  194,4,239,15,133,244,65,139,12,194,255,139,169,233,131,252,253,0,15,133,244,
  255,248,3,255,248,66,137,213,232,251,1,49,252,242,15,42,192,137,252,234,15,
  182,78,252,253,252,233,244,1,255,248,9,252,246,133,233,235,15,133,244,3,252,
  233,244,65,255,15,182,252,236,15,182,192,255,129,124,253,252,234,4,239,15,
  131,244,59,252,242,15,16,4,252,234,252,242,15,88,4,199,255,129,124,253,252,
  234,4,239,15,131,244,61,252,242,15,16,4,199,252,242,15,88,4,252,234,255,129,
  124,253,252,234,4,239,15,131,244,64,129,124,253,194,4,239,15,131,244,64,252,
  242,15,16,4,252,234,252,242,15,88,4,194,255,129,124,253,252,234,4,239,15,
  131,244,59,252,242,15,16,4,252,234,252,242,15,92,4,199,255,129,124,253,252,
  234,4,239,15,131,244,61,252,242,15,16,4,199,252,242,15,92,4,252,234,255,129,
  124,253,252,234,4,239,15,131,244,64,129,124,253,194,4,239,15,131,244,64,252,
  242,15,16,4,252,234,252,242,15,92,4,194,255,129,124,253,252,234,4,239,15,
  131,244,59,252,242,15,16,4,252,234,252,242,15,89,4,199,255,129,124,253,252,
  234,4,239,15,131,244,61,252,242,15,16,4,199,252,242,15,89,4,252,234,255,129,
  124,253,252,234,4,239,15,131,244,64,129,124,253,194,4,239,15,131,244,64,252,
  242,15,16,4,252,234,252,242,15,89,4,194,255,129,124,253,252,234,4,239,15,
  131,244,59,252,242,15,16,4,252,234,252,242,15,94,4,199,255,129,124,253,252,
  234,4,239,15,131,244,61,252,242,15,16,4,199,252,242,15,94,4,252,234,255,129,
  124,253,252,234,4,239,15,131,244,64,129,124,253,194,4,239,15,131,244,64,252,
  242,15,16,4,252,234,252,242,15,94,4,194,255,129,124,253,252,234,4,239,15,
  131,244,59,252,242,15,16,4,252,234,252,242,15,16,12,199,255,129,124,253,252,
  234,4,239,15,131,244,61,252,242,15,16,4,199,252,242,15,16,12,252,234,255,
  129,124,253,252,234,4,239,15,131,244,64,129,124,253,194,4,239,15,131,244,
  64,252,242,15,16,4,252,234,252,242,15,16,12,194,255,248,167,232,244,161,252,
  242,15,17,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,255,252,233,244,167,255,137,213,252,242,15,17,4,36,252,242,15,17,76,
  36,8,232,251,1,31,15,182,78,252,253,137,252,234,221,28,202,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,171,255,15,182,252,236,15,182,
  192,141,12,194,41,232,137,76,36,4,137,68,36,8,248,38,139,108,36,64,137,44,
  36,137,149,233,137,116,36,24,232,251,1,50,139,149,233,133,192,15,133,244,
  52,15,182,110,252,255,15,182,78,252,253,139,68,252,234,4,139,44,252,234,137,
  68,202,4,137,44,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,255,252,247,208,139,4,135,199,68,202,4,237,137,4,202,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,15,191,192,252,
  242,15,42,192,252,242,15,17,4,202,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,171,255,252,242,15,16,4,199,252,242,15,17,4,202,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,252,247,208,137,
  68,202,4,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,
  255,141,76,202,12,141,68,194,4,189,237,137,105,252,248,248,1,137,41,131,193,
  8,57,193,15,134,244,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,255,139,106,252,248,139,172,253,133,233,139,173,233,139,69,4,139,
  109,0,137,68,202,4,137,44,202,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,171,255,139,106,252,248,139,172,253,141,233,128,189,233,0,139,
  173,233,139,12,194,139,68,194,4,137,77,0,137,69,4,15,132,244,247,252,246,
  133,233,235,15,133,244,248,248,1,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,171,248,2,129,232,239,129,252,248,239,15,134,244,1,252,
  246,129,233,235,15,132,244,1,255,135,213,141,139,233,232,251,1,51,137,252,
  234,252,233,244,1,255,252,247,208,139,106,252,248,139,172,253,141,233,139,
  12,135,139,133,233,137,8,199,64,4,237,252,246,133,233,235,15,133,244,248,
  248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  2,252,246,129,233,235,15,132,244,1,128,189,233,0,15,132,244,1,137,213,137,
  194,141,139,233,232,251,1,51,137,252,234,252,233,244,1,255,139,106,252,248,
  252,242,15,16,4,199,139,172,253,141,233,139,141,233,252,242,15,17,1,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,252,247,208,
  139,106,252,248,139,172,253,141,233,139,141,233,137,65,4,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,171,255,141,180,253,134,233,139,
  108,36,64,131,189,233,0,15,132,244,247,137,149,233,141,20,202,137,252,233,
  232,251,1,52,139,149,233,248,1,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,171,255,252,247,208,139,74,252,248,139,4,135,139,108,36,
  64,137,76,36,8,137,68,36,4,137,44,36,137,149,233,137,116,36,24,232,251,1,
  53,139,149,233,15,182,78,252,253,137,4,202,199,68,202,4,237,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,139,108,36,64,137,
  149,233,139,139,233,59,139,233,137,116,36,24,15,131,244,251,248,1,137,193,
  37,252,255,7,0,0,193,252,233,11,137,76,36,8,61,252,255,7,0,0,15,132,244,249,
  248,2,137,44,36,137,68,36,4,232,251,1,54,139,149,233,15,182,78,252,253,137,
  4,202,199,68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,248,3,184,1,8,0,0,252,233,244,2,248,5,137,252,233,232,251,1,55,
  15,183,70,252,254,252,233,244,1,255,252,247,208,139,108,36,64,139,139,233,
  137,116,36,24,59,139,233,137,149,233,15,131,244,249,248,2,139,20,135,137,
  252,233,232,251,1,56,139,149,233,15,182,78,252,253,137,4,202,199,68,202,4,
  237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,3,
  137,252,233,232,251,1,55,15,183,70,252,254,252,247,208,252,233,244,2,255,
  252,247,208,139,106,252,248,139,173,233,139,4,135,252,233,244,168,255,252,
  247,208,139,106,252,248,139,173,233,139,4,135,252,233,244,169,255,15,182,
  252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,41,139,44,252,234,
  129,124,253,194,4,239,15,131,244,251,252,242,15,16,4,194,252,242,15,44,192,
  252,242,15,42,200,102,15,46,193,15,133,244,41,59,133,233,15,131,244,41,193,
  224,3,3,133,233,129,120,253,4,239,15,132,244,248,139,40,139,64,4,137,44,202,
  137,68,202,4,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,248,2,131,189,233,0,15,132,244,249,255,139,141,233,252,246,129,233,
  235,15,132,244,41,15,182,78,252,253,248,3,199,68,202,4,237,252,233,244,1,
  248,5,129,124,253,194,4,239,15,133,244,41,139,4,194,252,233,244,168,255,15,
  182,252,236,15,182,192,252,247,208,139,4,135,129,124,253,252,234,4,239,15,
  133,244,39,139,44,252,234,248,168,139,141,233,35,136,233,105,201,239,3,141,
  233,248,1,129,185,233,239,15,133,244,250,57,129,233,15,133,244,250,129,121,
  253,4,239,15,132,244,251,255,15,182,70,252,253,139,41,139,73,4,137,44,194,
  137,76,194,4,248,2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,248,3,15,182,70,252,253,199,68,194,4,237,252,233,244,2,248,4,139,137,
  233,133,201,15,133,244,1,248,5,139,141,233,133,201,15,132,244,3,252,246,129,
  233,235,15,133,244,3,252,233,244,39,255,15,182,252,236,15,182,192,129,124,
  253,252,234,4,239,15,133,244,40,139,44,252,234,59,133,233,15,131,244,40,193,
  224,3,3,133,233,129,120,253,4,239,15,132,244,248,139,40,139,64,4,137,44,202,
  137,68,202,4,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,248,2,131,189,233,0,15,132,244,249,139,141,233,252,246,129,233,235,
  15,132,244,40,255,15,182,78,252,253,248,3,199,68,202,4,237,252,233,244,1,
  255,15,182,252,236,15,182,192,139,44,252,234,252,242,15,44,4,194,59,133,233,
  15,131,244,42,193,224,3,3,133,233,248,43,139,40,139,64,4,137,44,202,137,68,
  202,4,248,44,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  171,255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,47,
  139,44,252,234,129,124,253,194,4,239,15,131,244,251,252,242,15,16,4,194,252,
  242,15,44,192,252,242,15,42,200,102,15,46,193,15,133,244,47,59,133,233,15,
  131,244,47,193,224,3,3,133,233,129,120,253,4,239,15,132,244,249,248,1,252,
  246,133,233,235,15,133,244,253,248,2,255,139,108,202,4,139,12,202,137,104,
  4,137,8,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  3,131,189,233,0,15,132,244,1,139,141,233,252,246,129,233,235,15,132,244,47,
  15,182,78,252,253,252,233,244,1,248,5,129,124,253,194,4,239,15,133,244,47,
  139,4,194,252,233,244,169,248,7,128,165,233,235,255,139,139,233,137,171,233,
  137,141,233,15,182,78,252,253,252,233,244,2,255,15,182,252,236,15,182,192,
  252,247,208,139,4,135,129,124,253,252,234,4,239,15,133,244,45,139,44,252,
  234,248,169,139,141,233,35,136,233,105,201,239,198,133,233,0,3,141,233,248,
  1,129,185,233,239,15,133,244,251,57,129,233,15,133,244,251,129,121,253,4,
  239,15,132,244,250,248,2,255,252,246,133,233,235,15,133,244,253,248,3,15,
  182,70,252,253,139,108,194,4,139,4,194,137,105,4,137,1,139,6,15,182,204,15,
  182,232,131,198,4,193,232,16,252,255,36,171,248,4,131,189,233,0,15,132,244,
  2,137,76,36,16,139,141,233,252,246,129,233,235,15,132,244,45,139,76,36,16,
  252,233,244,2,248,5,139,137,233,133,201,15,133,244,1,255,139,141,233,133,
  201,15,132,244,252,252,246,129,233,235,15,132,244,45,248,6,137,68,36,16,199,
  68,36,20,237,137,108,36,12,141,68,36,16,137,108,36,4,139,108,36,64,137,68,
  36,8,137,44,36,137,149,233,137,116,36,24,232,251,1,57,139,149,233,139,108,
  36,12,137,193,252,233,244,2,248,7,128,165,233,235,139,131,233,137,171,233,
  137,133,233,255,252,233,244,3,255,15,182,252,236,15,182,192,129,124,253,252,
  234,4,239,15,133,244,46,139,44,252,234,59,133,233,15,131,244,46,193,224,3,
  3,133,233,129,120,253,4,239,15,132,244,249,248,1,252,246,133,233,235,15,133,
  244,253,248,2,139,108,202,4,139,12,202,137,104,4,137,8,139,6,15,182,204,15,
  182,232,131,198,4,193,232,16,252,255,36,171,248,3,131,189,233,0,15,132,244,
  1,255,139,141,233,252,246,129,233,235,15,132,244,46,15,182,78,252,253,252,
  233,244,1,248,7,128,165,233,235,139,139,233,137,171,233,137,141,233,15,182,
  78,252,253,252,233,244,2,255,15,182,252,236,15,182,192,139,44,252,234,252,
  242,15,44,4,194,252,246,133,233,235,15,133,244,253,248,2,59,133,233,15,131,
  244,49,193,224,3,3,133,233,248,50,139,108,202,4,139,12,202,137,104,4,137,
  8,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,7,128,
  165,233,235,139,139,233,137,171,233,137,141,233,15,182,78,252,253,252,233,
  244,2,255,137,124,36,16,139,60,199,248,1,141,12,202,139,105,252,248,252,246,
  133,233,235,15,133,244,253,248,2,139,68,36,20,131,232,1,15,132,244,250,1,
  252,248,59,133,233,15,135,244,251,41,252,248,193,231,3,3,189,233,248,3,139,
  41,137,47,139,105,4,131,193,8,137,111,4,131,199,8,131,232,1,15,133,244,3,
  248,4,139,124,36,16,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,248,5,137,108,36,4,139,108,36,64,137,149,233,137,68,36,8,137,44,
  36,137,116,36,24,232,251,1,58,139,149,233,255,15,182,78,252,253,252,233,244,
  1,248,7,128,165,233,235,139,131,233,137,171,233,137,133,233,252,233,244,2,
  255,3,68,36,20,255,129,124,253,202,4,239,139,44,202,15,133,244,67,141,84,
  202,8,137,114,252,252,139,181,233,139,14,15,182,252,233,15,182,205,131,198,
  4,252,255,36,171,255,141,76,202,8,137,215,139,105,252,248,129,121,253,252,
  252,239,15,133,244,31,248,68,139,114,252,252,252,247,198,237,15,133,244,253,
  248,1,137,106,252,248,137,68,36,20,131,232,1,15,132,244,249,248,2,139,41,
  137,47,139,105,4,131,193,8,137,111,4,131,199,8,131,232,1,15,133,244,2,139,
  106,252,248,248,3,139,68,36,20,128,189,233,1,15,135,244,251,248,4,139,181,
  233,255,139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,171,248,5,252,
  247,198,237,15,133,244,4,15,182,78,252,253,252,247,209,139,124,202,252,248,
  139,191,233,139,191,233,252,233,244,4,248,7,129,252,238,239,252,247,198,237,
  15,133,244,254,41,252,242,137,215,139,114,252,252,252,233,244,1,248,8,129,
  198,239,252,233,244,1,255,141,76,202,8,139,105,232,139,65,252,236,137,41,
  137,65,4,139,105,252,240,139,65,252,244,137,105,8,137,65,12,139,105,224,139,
  65,228,137,105,252,248,137,65,252,252,129,252,248,239,184,237,15,133,244,
  31,137,202,137,114,252,252,139,181,233,139,14,15,182,252,233,15,182,205,131,
  198,4,252,255,36,171,255,137,124,36,16,137,92,36,20,139,108,202,252,240,139,
  68,202,252,248,139,157,233,131,198,4,139,189,233,248,1,57,216,15,131,244,
  251,129,124,253,199,4,239,15,132,244,250,252,242,15,42,192,139,108,199,4,
  137,108,202,12,139,44,199,137,108,202,8,131,192,1,252,242,15,17,4,202,137,
  68,202,252,248,248,2,15,183,70,252,254,141,180,253,134,233,248,3,139,92,36,
  20,139,124,36,16,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,248,4,131,192,1,252,233,244,1,248,5,41,216,248,6,59,133,233,15,135,
  244,3,255,105,252,248,239,3,189,233,129,191,233,239,15,132,244,253,141,92,
  24,1,139,175,233,139,135,233,137,44,202,137,68,202,4,139,175,233,139,135,
  233,137,108,202,8,137,68,202,12,137,92,202,252,248,252,233,244,2,248,7,131,
  192,1,252,233,244,6,255,129,124,253,202,252,236,239,15,133,244,251,139,108,
  202,232,129,124,253,202,252,244,239,15,133,244,251,129,124,253,202,252,252,
  239,15,133,244,251,128,189,233,235,15,133,244,251,141,180,253,134,233,199,
  68,202,252,248,0,0,0,0,199,68,202,252,252,252,255,127,252,254,252,255,248,
  1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,5,198,
  70,252,252,235,141,180,253,134,233,198,6,235,255,15,182,252,236,15,182,192,
  137,124,36,16,141,188,253,194,233,141,12,202,43,122,252,252,133,252,237,15,
  132,244,251,141,108,252,233,252,248,57,215,15,131,244,248,248,1,139,71,252,
  248,137,1,139,71,252,252,131,199,8,137,65,4,131,193,8,57,252,233,15,131,244,
  249,57,215,15,130,244,1,248,2,199,65,4,237,131,193,8,57,252,233,15,130,244,
  2,248,3,139,124,36,16,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,248,5,199,68,36,20,1,0,0,0,137,208,41,252,248,15,134,244,3,137,
  197,193,252,237,3,131,197,1,137,108,36,20,139,108,36,64,1,200,59,133,233,
  255,15,135,244,253,248,6,139,71,252,248,137,1,139,71,252,252,131,199,8,137,
  65,4,131,193,8,57,215,15,130,244,6,252,233,244,3,248,7,137,149,233,137,141,
  233,137,116,36,24,41,215,139,84,36,20,131,252,234,1,137,252,233,232,251,1,
  0,139,149,233,139,141,233,1,215,252,233,244,6,255,193,225,3,255,248,1,139,
  114,252,252,137,68,36,20,252,247,198,237,15,133,244,253,255,248,14,137,215,
  131,232,1,15,132,244,249,248,2,139,44,15,137,111,252,248,139,108,15,4,137,
  111,252,252,131,199,8,131,232,1,15,133,244,2,248,3,139,68,36,20,15,182,110,
  252,255,248,5,57,197,15,135,244,252,255,139,108,10,4,137,106,252,252,139,
  44,10,137,106,252,248,255,15,182,78,252,253,252,247,209,141,20,202,139,122,
  252,248,139,191,233,139,191,233,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,171,248,6,255,199,71,252,252,237,131,199,8,255,199,68,194,
  252,244,237,255,131,192,1,252,233,244,5,248,7,141,174,233,252,247,197,237,
  15,133,244,15,41,252,234,255,1,252,233,255,137,252,245,209,252,237,129,229,
  239,102,129,172,253,43,233,238,15,130,244,151,255,141,12,202,255,129,121,
  253,4,239,15,133,244,255,255,129,121,253,12,239,15,133,244,69,129,121,253,
  20,239,15,133,244,69,139,41,131,121,16,0,15,140,244,251,255,129,121,253,12,
  239,15,133,244,164,129,121,253,20,239,15,133,244,164,255,139,105,16,133,252,
  237,15,136,244,251,3,41,15,128,244,247,137,41,255,59,105,8,199,65,28,237,
  137,105,24,255,15,142,244,253,248,1,248,6,141,180,253,134,233,255,141,180,
  253,134,233,15,183,70,252,254,15,142,245,248,1,248,6,255,15,143,244,253,248,
  6,141,180,253,134,233,248,1,255,248,7,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,171,248,5,255,3,41,15,128,244,1,137,41,255,15,141,
  244,7,255,141,180,253,134,233,15,183,70,252,254,15,141,245,255,15,140,244,
  7,255,252,233,244,6,248,9,255,129,121,253,4,239,255,15,131,244,69,129,121,
  253,12,239,15,131,244,69,255,129,121,253,12,239,15,131,244,164,129,121,253,
  20,239,15,131,244,164,255,139,105,20,255,129,252,253,239,15,131,244,69,255,
  252,242,15,16,1,252,242,15,16,73,8,255,252,242,15,88,65,16,252,242,15,17,
  1,133,252,237,15,136,244,249,255,15,140,244,249,255,102,15,46,200,248,1,252,
  242,15,17,65,24,255,15,131,244,248,141,180,253,134,233,255,141,180,253,134,
  233,15,183,70,252,254,15,131,245,255,15,130,244,248,141,180,253,134,233,255,
  248,2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  3,102,15,46,193,252,233,244,1,255,141,12,202,139,105,4,129,252,253,239,15,
  132,244,247,255,137,105,252,252,139,41,137,105,252,248,252,233,245,255,141,
  180,253,134,233,139,1,137,105,252,252,137,65,252,248,255,139,139,233,139,
  4,129,139,128,233,139,108,36,64,137,147,233,137,171,233,252,255,224,255,141,
  180,253,134,233,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,255,137,252,245,209,252,237,129,229,239,102,129,172,253,43,233,238,
  15,130,244,153,255,139,190,233,139,108,36,64,141,12,202,59,141,233,15,135,
  244,26,15,182,142,233,57,200,15,134,244,249,248,2,255,15,183,70,252,254,252,
  233,245,255,248,3,199,68,194,252,252,237,131,192,1,57,200,15,134,244,3,252,
  233,244,2,255,141,44,197,237,141,4,194,139,122,252,248,137,104,252,252,137,
  120,252,248,139,108,36,64,141,12,200,59,141,233,15,135,244,25,137,209,137,
  194,15,182,174,233,133,252,237,15,132,244,248,248,1,131,193,8,57,209,15,131,
  244,249,139,121,252,248,137,56,139,121,252,252,137,120,4,131,192,8,199,65,
  252,252,237,131,252,237,1,15,133,244,1,248,2,255,139,190,233,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,248,3,199,64,4,237,
  131,192,8,131,252,237,1,15,133,244,3,252,233,244,2,255,139,106,252,248,139,
  189,233,139,108,36,64,141,68,194,252,248,137,149,233,141,136,233,59,141,233,
  137,133,233,255,137,44,36,255,137,124,36,4,137,44,36,255,15,135,244,24,199,
  131,233,237,255,252,255,215,255,252,255,147,233,255,139,149,233,137,171,233,
  199,131,233,237,141,12,194,252,247,217,3,141,233,139,114,252,252,252,233,
  244,12,255,254,0
};

enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_vm_unwind_yield,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c_eh,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_rethrow,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_rtlunwind,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_v,
  GLOB_vm_growstack_f,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vm_call_dispatch,
  GLOB_vmeta_call,
  GLOB_vm_call_dispatch_f,
  GLOB_vm_cpcall,
  GLOB_cont_ffi_callback,
  GLOB_vm_call_tail,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tgetr,
  GLOB_BC_TGETR_Z,
  GLOB_BC_TGETR2_Z,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_tsetr,
  GLOB_BC_TSETR_Z,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_equal_cd,
  GLOB_vmeta_istype,
  GLOB_vmeta_arith_vno,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nvo,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vvo,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_BC_LEN_Z,
  GLOB_vmeta_call_ra,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res_,
  GLOB_ff_type,
  GLOB_fff_res1,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_fff_resxmm0,
  GLOB_ff_tostring,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_fff_res2,
  GLOB_fff_res,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_fff_resi,
  GLOB_fff_resn,
  GLOB_ff_math_abs,
  GLOB_ff_math_floor,
  GLOB_vm_floor_sse,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil_sse,
  GLOB_ff_math_sqrt,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_pow,
  GLOB_ff_math_atan2,
  GLOB_ff_math_fmod,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_vm_trunc_sse,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_fff_resstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_reverse,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_bit_tobit,
  GLOB_fff_resbit,
  GLOB_ff_bit_band,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_fff_fallback_2,
  GLOB_fff_fallback_1,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_hotloop,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_cont_stitch,
  GLOB_vm_profhook,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_floor,
  GLOB_vm_ceil,
  GLOB_vm_trunc,
  GLOB_vm_mod,
  GLOB_vm_powi_sse,
  GLOB_vm_cpuid,
  GLOB_assert_bad_for_arg_type,
  GLOB_vm_ffi_callback,
  GLOB_vm_ffi_call,
  GLOB_BC_MODVN_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "vm_unwind_yield",
  "BC_RET_Z",
  "vm_return",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c_eh",
  "vm_unwind_c@8",
  "vm_unwind_rethrow",
  "vm_unwind_ff@4",
  "vm_unwind_ff_eh",
  "vm_rtlunwind@16",
  "vm_growstack_c",
  "vm_growstack_v",
  "vm_growstack_f",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vm_call_dispatch",
  "vmeta_call",
  "vm_call_dispatch_f",
  "vm_cpcall",
  "cont_ffi_callback",
  "vm_call_tail",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tgetr",
  "BC_TGETR_Z",
  "BC_TGETR2_Z",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_tsetr",
  "BC_TSETR_Z",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_equal_cd",
  "vmeta_istype",
  "vmeta_arith_vno",
  "vmeta_arith_vn",
  "vmeta_arith_nvo",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vvo",
  "vmeta_arith_vv",
  "vmeta_len",
  "BC_LEN_Z",
  "vmeta_call_ra",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res_",
  "ff_type",
  "fff_res1",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "fff_resxmm0",
  "ff_tostring",
  "fff_gcstep",
  "ff_next",
  "fff_res2",
  "fff_res",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "fff_resi",
  "fff_resn",
  "ff_math_abs",
  "ff_math_floor",
  "vm_floor_sse",
  "ff_math_ceil",
  "vm_ceil_sse",
  "ff_math_sqrt",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_pow",
  "ff_math_atan2",
  "ff_math_fmod",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "vm_trunc_sse",
  "ff_math_min",
  "ff_math_max",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "fff_resstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_reverse",
  "ff_string_lower",
  "ff_string_upper",
  "ff_bit_tobit",
  "fff_resbit",
  "ff_bit_band",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "fff_fallback_2",
  "fff_fallback_1",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_hotloop",
  "vm_callhook",
  "vm_hotcall",
  "cont_stitch",
  "vm_profhook",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_floor",
  "vm_ceil",
  "vm_trunc",
  "vm_mod",
  "vm_powi_sse",
  "vm_cpuid",
  "assert_bad_for_arg_type",
  "vm_ffi_callback",
  "vm_ffi_call@4",
  "BC_MODVN_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  (const char *)0
};
static const char *const extnames[] = {
  "lj_state_growstack@8",
  "RtlUnwind@16",
  "lj_err_unwind_win",
  "lj_meta_tget",
  "lj_tab_getinth@8",
  "lj_meta_tset",
  "lj_tab_setinth",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_equal_cd@8",
  "lj_meta_istype",
  "lj_meta_arith",
  "lj_meta_len@8",
  "lj_meta_call",
  "lj_meta_for@8",
  "lj_tab_get",
  "lj_strfmt_num@8",
  "lj_tab_next",
  "lj_ffh_coroutine_wrap_err@8",
  "log",
  "log10",
  "exp",
  "sin",
  "cos",
  "tan",
  "asin",
  "acos",
  "atan",
  "sinh",
  "cosh",
  "tanh",
  "pow",
  "atan2",
  "fmod",
  "lj_str_new",
  "lj_buf_putstr_reverse@8",
  "lj_buf_tostr@4",
  "lj_buf_putstr_lower@8",
  "lj_buf_putstr_upper@8",
  "lj_gc_step@4",
  "lj_dispatch_ins@8",
  "lj_trace_hot@8",
  "lj_dispatch_call@8",
  "lj_dispatch_stitch@8",
  "lj_dispatch_profile@8",
  "lj_trace_exit@8",
  "lj_err_throw@8",
  "lj_ccallback_enter@8",
  "lj_ccallback_leave@8",
  "lj_tab_len@4",
  "lj_meta_cat",
  "lj_gc_barrieruv@8",
  "lj_func_closeuv@8",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop@4",
  "lj_tab_dup@8",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#define DtE(_V) (int)(ptrdiff_t)&(((SBuf *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))
#define PC2PROTO(field)  ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 2, FRAME_P, LJ_TTRUE, FRAME_TYPE, FRAME_C, FRAME_TYPE, DISPATCH_GL(vmstate), ~LJ_VMST_C);
  dasm_put(Dst, 91, Dt1(->base), Dt1(->top), Dt1(->cframe), Dt1(->maxstack));
  dasm_put(Dst, 195, LJ_TNIL, Dt1(->top), Dt1(->top), LUA_YIELD);
  dasm_put(Dst, 280, Dt1(->glref), Dt2(->vmstate), ~LJ_VMST_C, CFRAME_RAWMASK, 1+1, Dt1(->base), Dt1(->glref), GG_G2DISP, LJ_TFALSE, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
  dasm_put(Dst, 361, CFRAME_OFS_SEH, LUA_MINSTACK, -4+PC2PROTO(framesize), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_CP);
  dasm_put(Dst, 513, CFRAME_RESUME, Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->status), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE);
  dasm_put(Dst, 593, FRAME_CP, FRAME_C, Dt1(->glref), Dt1(->cframe), GG_G2DISP, Dt1(->cframe), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), LJ_TFUNC);
  dasm_put(Dst, 733, Dt7(->pc), Dt1(->stack), Dt1(->top), Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->cframe), DISPATCH_GL(cur_L), FRAME_CP, LJ_TNIL, Dt7(->pc));
  dasm_put(Dst, 917, PC2PROTO(k), LJ_TSTR, BC_GGET, DISPATCH_GL(tmptv), LJ_TTAB);
  dasm_put(Dst, 1036, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 2+1);
  dasm_put(Dst, 1208, LJ_TNIL, LJ_TSTR, BC_GSET, DISPATCH_GL(tmptv), LJ_TTAB, Dt1(->base));
  dasm_put(Dst, 1325, Dt1(->base), Dt1(->top), FRAME_CONT, 3+1, Dt1(->base), Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1522, -BCBIAS_J*4, LJ_TISTRUECOND, LJ_TISTRUECOND, Dt1(->base));
  dasm_put(Dst, 1633, Dt1(->base), Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1746, Dt1(->base), Dt1(->base), FRAME_CONT, 2+1, Dt1(->base), Dt1(->base));
#if LJ_52
  dasm_put(Dst, 1854);
#else
  dasm_put(Dst, 1873);
#endif
  dasm_put(Dst, 1878, Dt1(->base), Dt1(->base), Dt7(->pc), Dt1(->base), Dt1(->base), GG_DISP2STATIC, 1+1, LJ_TISTRUECOND);
  dasm_put(Dst, 2067, 1+1, ~LJ_TNUMX, ((char *)(&((GCfuncC *)0)->upvalue)), LJ_TSTR, 1+1);
  dasm_put(Dst, 2166, LJ_TTAB, Dt6(->metatable), LJ_TNIL, DISPATCH_GL(gcroot)+4*(GCROOT_MMNAME+MM_metatable), LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR);
  dasm_put(Dst, 2237, DtB(->key.gcr), DtB(->next), LJ_TNIL, LJ_TUDATA);
  dasm_put(Dst, 2297, LJ_TISNUM, LJ_TNUMX, DISPATCH_GL(gcroot[GCROOT_BASEMT]), 2+1, LJ_TTAB, Dt6(->metatable), LJ_TTAB);
  dasm_put(Dst, 2356, Dt6(->metatable), LJ_TTAB, Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist), 2+1);
  dasm_put(Dst, 2418, LJ_TTAB, 1+1, LJ_TISNUM, 1+1, LJ_TSTR);
  dasm_put(Dst, 2525, LJ_TSTR, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 2581, Dt1(->base), Dt1(->base), 1+1, LJ_TTAB, Dt1(->base), Dt1(->top), Dt1(->base));
  dasm_put(Dst, 2679, 1+2, LJ_TNIL, LJ_TNIL, 1+1, LJ_TTAB);
#if LJ_52
  dasm_put(Dst, 2755, Dt6(->metatable));
#endif
  dasm_put(Dst, 2764, Dt8(->upvalue[0]), LJ_TFUNC, LJ_TNIL, 1+3, 2+1, LJ_TTAB, LJ_TISNUM, Dt6(->asize));
  dasm_put(Dst, 2874, Dt6(->array), LJ_TNIL, Dt6(->hmask), 1+0, 1+1);
  dasm_put(Dst, 2739, LJ_TTAB);
#if LJ_52
  dasm_put(Dst, 2755, Dt6(->metatable));
#endif
  dasm_put(Dst, 2950, Dt8(->upvalue[0]), LJ_TFUNC, 1+3, 1+1, 8+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, 2+1);
  dasm_put(Dst, 3034, LJ_TFUNC, LJ_TFUNC, 16+FRAME_PCALL, 1+1, LJ_TTHREAD, Dt1(->cframe), Dt1(->status), LUA_YIELD);
  dasm_put(Dst, 3120, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 3211, Dt1(->base), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
  dasm_put(Dst, 3294, LJ_TTRUE, FRAME_TYPE, LJ_TFALSE, Dt1(->top), Dt1(->top), 1+2, Dt1(->top));
  dasm_put(Dst, 3399, Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top), Dt1(->base));
  dasm_put(Dst, 3472, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), Dt1(->base), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, LUA_YIELD);
  dasm_put(Dst, 3579, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack), FRAME_TYPE);
  dasm_put(Dst, 3671, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_RESUME, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status));
  dasm_put(Dst, 3760, 1+1, LJ_TISNUM, 1+1, FRAME_TYPE);
  dasm_put(Dst, 3857, LJ_TNIL, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 3951, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4011, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4124, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4215, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4306, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4398, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4489, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM);
  dasm_put(Dst, 4594, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4712, 2+1, LJ_TISNUM, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4802, 1+2, 1+1);
  dasm_put(Dst, 4941, LJ_TISNUM, 1+2);
  dasm_put(Dst, 5050, LJ_TISNUM, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 5142, LJ_TISNUM, 1+1, LJ_TSTR, Dt5(->len), Dt5([1]));
  dasm_put(Dst, 5226, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+1, LJ_TISNUM, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 5321, LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+2, LJ_TISNUM);
  dasm_put(Dst, 5389, LJ_TSTR, LJ_TISNUM, Dt5(->len), sizeof(GCstr)-1);
  dasm_put(Dst, 5487);
  dasm_put(Dst, 5545, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->p));
  dasm_put(Dst, 5619, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->p));
  dasm_put(Dst, 5693, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->p));
  dasm_put(Dst, 5767, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 5885, LJ_TISNUM, 1+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 5993, 1+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6117, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 6236, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM);
  dasm_put(Dst, 6337, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6481, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6581, 1+2, 1+1, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base));
  dasm_put(Dst, 6696, Dt1(->top), Dt7(->pc), FRAME_TYPE, LUA_MINSTACK, Dt1(->base));
  dasm_put(Dst, 6804, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), DISPATCH_GL(hookmask), HOOK_VMEVENT, HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount));
  dasm_put(Dst, 6892, DISPATCH_GL(hookmask), HOOK_ACTIVE, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount));
  dasm_put(Dst, 6939, LUA_MASKLINE, Dt1(->base), Dt1(->base), GG_DISP2STATIC, Dt7(->pc), PC2PROTO(framesize), Dt1(->base), Dt1(->top), GG_DISP2J);
  dasm_put(Dst, 7043, DISPATCH_J(L), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 7204, DtD(->traceno), DtD(->link), BC_JLOOP, DISPATCH_J(exitno), Dt1(->base), GG_DISP2J, DISPATCH_J(L), Dt1(->base), LJ_TNIL);
#if LJ_HASPROFILE
  dasm_put(Dst, 7302, Dt1(->base), Dt1(->base));
#endif
  dasm_put(Dst, 7331, DISPATCH_GL(vmstate), DISPATCH_GL(vmstate), ~LJ_VMST_EXIT, DISPATCH_J(exitno), DISPATCH_J(parent), 8*8+16, DISPATCH_GL(cur_L), DISPATCH_GL(jit_base), DISPATCH_J(L), Dt1(->base), GG_DISP2J, DISPATCH_GL(jit_base), Dt1(->cframe), CFRAME_RAWMASK, CFRAME_OFS_L, Dt1(->base), CFRAME_OFS_PC);
  dasm_put(Dst, 7478, Dt7(->pc), PC2PROTO(k), Dt1(->base), DISPATCH_GL(jit_base), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, BC_FUNCF, BC_FUNCC+2, FRAME_TYPE);
  dasm_put(Dst, 7571, Dt7(->pc), PC2PROTO(k));
  dasm_put(Dst, 7854);
  dasm_put(Dst, 8147);
  dasm_put(Dst, 8235);
#ifdef LUA_USE_ASSERT
  dasm_put(Dst, 8309);
#endif
#define DtF(_V) (int)(ptrdiff_t)&(((CTState *)0)_V)
  dasm_put(Dst, 8311, GG_G2DISP, Dt2(->ctype_state), DtF(->cb.slot), CFRAME_SIZE+16, DtF(->cb.gpr[0]), DtF(->cb.gpr[1]), DtF(->cb.stack), CFRAME_SIZE+12, CFRAME_SIZE+8, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), Dt7(->pc), DISPATCH_GL(ctype_state), DtF(->L), Dt1(->base));
#define Dt10(_V) (int)(ptrdiff_t)&(((CCallState *)0)_V)
  dasm_put(Dst, 8458, Dt1(->top), DtF(->cb.gpr[0]), DtF(->cb.gpr[1]), DtF(->cb.gpr[2]), DtF(->cb.fpr[0].d), DtF(->cb.fpr[0].f), Dt1(->top), Dt10(->spadj), Dt10(->spadj), Dt10(->nsp));
  dasm_put(Dst, 8560, offsetof(CCallState, stack), Dt10(->gpr[0]), Dt10(->gpr[1]), Dt10(->func), Dt10(->gpr[0]), Dt10(->gpr[1]), Dt10(->resx87), Dt10(->fpr[0].d[0]));
  dasm_put(Dst, 8626, Dt10(->fpr[0].f[0]), Dt10(->spadj));
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop)
{
  int vk = 0;
  dasm_put(Dst, 2677, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */


  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    dasm_put(Dst, 8641, LJ_TISNUM, LJ_TISNUM);
    switch (op) {
    case BC_ISLT:
    dasm_put(Dst, 8682);
    break;
    case BC_ISGE:
    dasm_put(Dst, 8687);
    break;
    case BC_ISLE:
    dasm_put(Dst, 8692);
    break;
    case BC_ISGT:
    dasm_put(Dst, 8697);
    break;
    default: break;  /* Shut up GCC. */
    }
    dasm_put(Dst, 8702, -BCBIAS_J*4);
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 8733);
    if (vk) {
    } else {
    }
    dasm_put(Dst, 8741, LJ_TISNUM, LJ_TISNUM);
  iseqne_fp:
    if (vk) {
      dasm_put(Dst, 8777);
    } else {
      dasm_put(Dst, 8786);
    }
  iseqne_end:
    if (vk) {
      dasm_put(Dst, 8795, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 8810, -BCBIAS_J*4);
    }
    if (LJ_DUALNUM && (op == BC_ISEQV || op == BC_ISNEV ||
		       op == BC_ISEQN || op == BC_ISNEN)) {
      dasm_put(Dst, 8825);
    } else {
      dasm_put(Dst, 8714);
    }
    if (op == BC_ISEQV || op == BC_ISNEV) {
      dasm_put(Dst, 8830, LJ_TCDATA, LJ_TCDATA, LJ_TISPRI, LJ_TISTABUD, Dt6(->metatable));
      dasm_put(Dst, 8897, Dt6(->nomm), 1<<MM_eq);
      if (vk) {
	dasm_put(Dst, 8907);
      } else {
	dasm_put(Dst, 8911);
      }
      dasm_put(Dst, 8917);
    } else {
      dasm_put(Dst, 8922, LJ_TCDATA);
      if (LJ_DUALNUM && vk) {
	dasm_put(Dst, 8929);
      } else {
	dasm_put(Dst, 7566);
      }
      dasm_put(Dst, 8934);
    }
    break;
  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 8939, LJ_TSTR);
  iseqne_test:
    if (vk) {
      dasm_put(Dst, 8781);
    } else {
      dasm_put(Dst, 6934);
    }
    goto iseqne_end;
  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 8964);
    if (vk) {
    } else {
    }
    dasm_put(Dst, 8972, LJ_TISNUM);
    goto iseqne_fp;
  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 8998);
    if (!LJ_HASFFI) goto iseqne_test;
    if (vk) {
      dasm_put(Dst, 9011, -BCBIAS_J*4, LJ_TCDATA);
    } else {
      dasm_put(Dst, 9060, LJ_TCDATA, -BCBIAS_J*4);
    }
    break;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 9103, LJ_TISTRUECOND);
    if (op == BC_IST || op == BC_ISTC) {
      dasm_put(Dst, 8697);
    } else {
      dasm_put(Dst, 8692);
    }
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 9115);
    }
    dasm_put(Dst, 8702, -BCBIAS_J*4);
    break;

  case BC_ISTYPE:
    dasm_put(Dst, 9126);
    break;
  case BC_ISNUM:
    dasm_put(Dst, 9153, LJ_TISNUM);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 9182);
    break;
  case BC_NOT:
    dasm_put(Dst, 9215, LJ_TISTRUECOND, LJ_TTRUE);
    break;
  case BC_UNM:
    dasm_put(Dst, 9250, LJ_TISNUM);
    break;
  case BC_LEN:
    dasm_put(Dst, 9308, LJ_TSTR, Dt5(->len), LJ_TTAB);
#if LJ_52
    dasm_put(Dst, 9372, Dt6(->metatable));
#endif
    dasm_put(Dst, 9386);
#if LJ_52
    dasm_put(Dst, 9412, Dt6(->nomm), 1<<MM_len);
#endif
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    dasm_put(Dst, 9428);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9436, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9461, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9486, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9283);
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    dasm_put(Dst, 9428);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9521, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9546, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9571, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9283);
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    dasm_put(Dst, 9428);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9606, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9631, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9656, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9283);
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    dasm_put(Dst, 9428);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9691, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9716, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9741, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9283);
    break;
  case BC_MODVN:
    dasm_put(Dst, 9428);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9776, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9801, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9826, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9861);
    break;
  case BC_MODNV: case BC_MODVV:
    dasm_put(Dst, 9428);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9776, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9801, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9826, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9891);
    break;
  case BC_POW:
    dasm_put(Dst, 9428);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9776, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9801, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9826, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9896);
    break;

  case BC_CAT:
    dasm_put(Dst, 9945, Dt1(->base), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 10039, LJ_TSTR);
    break;
  case BC_KCDATA:
    dasm_put(Dst, 10039, LJ_TCDATA);
    break;
  case BC_KSHORT:
    dasm_put(Dst, 10072);
    break;
  case BC_KNUM:
    dasm_put(Dst, 10105);
    break;
  case BC_KPRI:
    dasm_put(Dst, 10136);
    break;
  case BC_KNIL:
    dasm_put(Dst, 10162, LJ_TNIL);
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 10208, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
    dasm_put(Dst, 10252, offsetof(GCfuncL, uvptr), DtA(->closed), DtA(->v), TV2MARKOFS, LJ_GC_BLACK, LJ_TISGCV, LJ_TNUMX - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES);
    dasm_put(Dst, 10337, GG_DISP2G);
    break;
#undef TV2MARKOFS
  case BC_USETS:
    dasm_put(Dst, 10354, offsetof(GCfuncL, uvptr), DtA(->v), LJ_TSTR, DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->closed), GG_DISP2G);
    break;
  case BC_USETN:
    dasm_put(Dst, 10445, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETP:
    dasm_put(Dst, 10487, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_UCLO:
    dasm_put(Dst, 10524, -BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 10578, Dt1(->base), Dt1(->base), LJ_TFUNC);
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
    dasm_put(Dst, 10649, Dt1(->base), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), LJ_TTAB);
    break;
  case BC_TDUP:
    dasm_put(Dst, 10775, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;

  case BC_GGET:
    dasm_put(Dst, 10867, Dt7(->env));
    break;
  case BC_GSET:
    dasm_put(Dst, 10885, Dt7(->env));
    break;

  case BC_TGETV:
    dasm_put(Dst, 10903, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable));
    dasm_put(Dst, 11024, Dt6(->metatable), Dt6(->nomm), 1<<MM_index, LJ_TNIL, LJ_TSTR);
    break;
  case BC_TGETS:
    dasm_put(Dst, 11072, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 11141, LJ_TNIL, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 11230, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 11329, LJ_TNIL);
    break;
  case BC_TGETR:
    dasm_put(Dst, 11346, Dt6(->asize), Dt6(->array));
    break;

  case BC_TSETV:
    dasm_put(Dst, 11411, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK);
    dasm_put(Dst, 11503, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt6(->marked), (uint8_t)~LJ_GC_BLACK);
    dasm_put(Dst, 11590, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 11609, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->nomm), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 11684, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DtB(->next));
    dasm_put(Dst, 11776, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt1(->base), Dt1(->base), Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    dasm_put(Dst, 11868);
    break;
  case BC_TSETB:
    dasm_put(Dst, 11873, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable));
    dasm_put(Dst, 11971, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETR:
    dasm_put(Dst, 12017, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 12115, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base));
    dasm_put(Dst, 12253, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALL: case BC_CALLM:
    dasm_put(Dst, 9432);
    if (op == BC_CALLM) {
      dasm_put(Dst, 12282);
    }
    dasm_put(Dst, 12287, LJ_TFUNC, Dt7(->pc));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 12282);
    break;
  case BC_CALLT:
    dasm_put(Dst, 12328, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->pc));
    dasm_put(Dst, 12428, FRAME_TYPE, Dt7(->pc), PC2PROTO(k), FRAME_VARG, FRAME_TYPEP, FRAME_VARG);
    break;

  case BC_ITERC:
    dasm_put(Dst, 12514, LJ_TFUNC, 2+1, Dt7(->pc));
    break;

  case BC_ITERN:
    dasm_put(Dst, 12594, Dt6(->asize), Dt6(->array), LJ_TNIL, -BCBIAS_J*4, Dt6(->hmask));
    dasm_put(Dst, 12736, sizeof(Node), Dt6(->node), DtB(->val.it), LJ_TNIL, DtB(->key.gcr), DtB(->key.it), DtB(->val.gcr), DtB(->val.it));
    break;

  case BC_ISNEXT:
    dasm_put(Dst, 12801, LJ_TFUNC, LJ_TTAB, LJ_TNIL, Dt8(->ffid), FF_next_N, -BCBIAS_J*4, BC_JMP, -BCBIAS_J*4, BC_ITERC);
    dasm_put(Dst, 9407);
    break;

  case BC_VARG:
    dasm_put(Dst, 12908, (8+FRAME_VARG), LJ_TNIL, Dt1(->maxstack));
    dasm_put(Dst, 13066, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 12282);
    break;

  case BC_RET: case BC_RET0: case BC_RET1:
    if (op != BC_RET0) {
      dasm_put(Dst, 13143);
    }
    dasm_put(Dst, 13147, FRAME_TYPE);
    switch (op) {
    case BC_RET:
      dasm_put(Dst, 13166);
      break;
    case BC_RET1:
      dasm_put(Dst, 13224);
      /* fallthrough */
    case BC_RET0:
      dasm_put(Dst, 3846);
    default:
      break;
    }
    dasm_put(Dst, 13240, Dt7(->pc), PC2PROTO(k));
    if (op == BC_RET) {
      dasm_put(Dst, 13282, LJ_TNIL);
    } else {
      dasm_put(Dst, 13291, LJ_TNIL);
    }
    dasm_put(Dst, 13298, -FRAME_VARG, FRAME_TYPEP);
    if (op != BC_RET0) {
      dasm_put(Dst, 13322);
    }
    dasm_put(Dst, 9407);
    break;

  /* -- Loops and branches ------------------------------------------------ */


  case BC_FORL:
    dasm_put(Dst, 13326, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 13347);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 13351, LJ_TISNUM);
      if (!vk) {
	dasm_put(Dst, 13361, LJ_TISNUM, LJ_TISNUM);
      } else {
#ifdef LUA_USE_ASSERT
	dasm_put(Dst, 13390, LJ_TISNUM, LJ_TISNUM);
#endif
	dasm_put(Dst, 13409);
      }
      dasm_put(Dst, 13428, LJ_TISNUM);
      if (op == BC_FORI) {
	dasm_put(Dst, 13439, -BCBIAS_J*4);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 13453, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 13471, -BCBIAS_J*4);
      } else {
	dasm_put(Dst, 13463, BC_JLOOP);
      }
      dasm_put(Dst, 13485);
      if (vk) {
	dasm_put(Dst, 13508);
      }
      dasm_put(Dst, 13428, LJ_TISNUM);
      if (op == BC_FORI) {
	dasm_put(Dst, 13517);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 13522, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 13536);
      } else {
	dasm_put(Dst, 13532, BC_JLOOP);
      }
      dasm_put(Dst, 13541);
    } else if (!vk) {
      dasm_put(Dst, 13548, LJ_TISNUM);
    }
    if (!vk) {
      dasm_put(Dst, 13554, LJ_TISNUM);
    } else {
#ifdef LUA_USE_ASSERT
      dasm_put(Dst, 13568, LJ_TISNUM, LJ_TISNUM);
#endif
    }
    dasm_put(Dst, 13587);
    if (!vk) {
      dasm_put(Dst, 13591, LJ_TISNUM);
    }
    dasm_put(Dst, 13600);
    if (vk) {
      dasm_put(Dst, 13612);
    } else {
      dasm_put(Dst, 13631);
    }
    dasm_put(Dst, 13636);
    if (op == BC_FORI) {
      dasm_put(Dst, 13649, -BCBIAS_J*4);
    } else if (op == BC_JFORI) {
      dasm_put(Dst, 13659, -BCBIAS_J*4, BC_JLOOP);
    } else if (op == BC_IFORL) {
      dasm_put(Dst, 13673, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 13669, BC_JLOOP);
    }
    dasm_put(Dst, 13683);
    break;

  case BC_ITERL:
    dasm_put(Dst, 13326, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 13714, LJ_TNIL);
    if (op == BC_JITERL) {
      dasm_put(Dst, 13729, BC_JLOOP);
    } else {
      dasm_put(Dst, 13743, -BCBIAS_J*4);
    }
    dasm_put(Dst, 8712);
    break;

  case BC_LOOP:
    dasm_put(Dst, 13326, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_ILOOP:
    dasm_put(Dst, 8714);
    break;

  case BC_JLOOP:
    dasm_put(Dst, 13759, DISPATCH_J(trace), DtD(->mcode), DISPATCH_GL(jit_base), DISPATCH_GL(tmpbuf.L));
    break;

  case BC_JMP:
    dasm_put(Dst, 13782, -BCBIAS_J*4);
    break;

  /* -- Function headers -------------------------------------------------- */

   /*
   ** Reminder: A function may be called with func/args above L->maxstack,
   ** i.e. occupying EXTRA_STACK slots. And vmeta_call may add one extra slot,
   ** too. This means all FUNC* ops (including fast functions) must check
   ** for stack overflow _before_ adding more slots!
   */

  case BC_FUNCF:
    dasm_put(Dst, 13806, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_CALL);
  case BC_FUNCV:  /* NYI: compiled vararg functions. */
    break;

  case BC_JFUNCF:
#if !LJ_HASJIT
    break;
#endif
  case BC_IFUNCF:
    dasm_put(Dst, 13827, -4+PC2PROTO(k), Dt1(->maxstack), -4+PC2PROTO(numparams));
    if (op == BC_JFUNCF) {
      dasm_put(Dst, 13857, BC_JLOOP);
    } else {
      dasm_put(Dst, 8714);
    }
    dasm_put(Dst, 13866, LJ_TNIL);
    break;

  case BC_JFUNCV:
#if !LJ_HASJIT
    break;
#endif
    dasm_put(Dst, 8309);
    break;  /* NYI: compiled vararg functions. */

  case BC_IFUNCV:
    dasm_put(Dst, 13888, FRAME_VARG, Dt1(->maxstack), -4+PC2PROTO(numparams), LJ_TNIL);
    if (op == BC_JFUNCV) {
      dasm_put(Dst, 13857, BC_JLOOP);
    } else {
      dasm_put(Dst, 13979, -4+PC2PROTO(k));
    }
    dasm_put(Dst, 14001, LJ_TNIL);
    break;

  case BC_FUNCC:
  case BC_FUNCCW:
    dasm_put(Dst, 14023, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), Dt1(->top));
    if (op == BC_FUNCC) {
      dasm_put(Dst, 14052);
    } else {
      dasm_put(Dst, 14056);
    }
    dasm_put(Dst, 14064, DISPATCH_GL(vmstate), ~LJ_VMST_C);
    if (op == BC_FUNCC) {
      dasm_put(Dst, 14073);
    } else {
      dasm_put(Dst, 14077, DISPATCH_GL(wrapf));
    }
    dasm_put(Dst, 14082, Dt1(->base), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->top));
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  dasm_growpc(Dst, BC__MAX);
  build_subroutines(ctx);
  dasm_put(Dst, 14110);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op);
  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
  int fcofs = (int)((uint8_t *)ctx->glob[GLOB_vm_ffi_call] - ctx->code);
#if LJ_64
#define SZPTR	"8"
#define BSZPTR	"3"
#define REG_SP	"0x7"
#define REG_RA	"0x10"
#else
#define SZPTR	"4"
#define BSZPTR	"2"
#define REG_SP	"0x4"
#define REG_RA	"0x8"
#endif
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.long .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.long 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.long .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.long .Lframe0\n"
#if LJ_64
	"\t.quad .Lbegin\n"
	"\t.quad %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#if LJ_NO_UNWIND
	"\t.byte 0x8d\n\t.uleb128 0x6\n"	/* offset r13 */
	"\t.byte 0x8c\n\t.uleb128 0x7\n"	/* offset r12 */
#endif
#else
	"\t.long .Lbegin\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE0:\n\n", fcofs, CFRAME_SIZE);
#if LJ_HASFFI
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.long .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.long .Lframe0\n"
#if LJ_64
	"\t.quad lj_vm_ffi_call\n"
	"\t.quad %d\n"
	"\t.byte 0xe\n\t.uleb128 16\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0xd\n\t.uleb128 0x6\n"		/* def_cfa_register rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
#else
	"\t.long lj_vm_ffi_call\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 8\n"		/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0xd\n\t.uleb128 0x5\n"		/* def_cfa_register ebp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE1:\n\n", (int)ctx->codesz - fcofs);
#endif
#if !LJ_NO_UNWIND
#if (defined(__sun__) && defined(__svr4__))
#if LJ_64
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@unwind\n");
#else
    fprintf(ctx->fp, "\t.section .eh_frame,\"aw\",@progbits\n");
#endif
#else
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
#endif
    fprintf(ctx->fp,
	".Lframe1:\n"
	"\t.long .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.long lj_err_unwind_dwarf-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE2:\n"
	"\t.long .LEFDE2-.LASFDE2\n"
	".LASFDE2:\n"
	"\t.long .LASFDE2-.Lframe1\n"
	"\t.long .Lbegin-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE2:\n\n", fcofs, CFRAME_SIZE);
#if LJ_HASFFI
    fprintf(ctx->fp,
	".Lframe2:\n"
	"\t.long .LECIE2-.LSCIE2\n"
	".LSCIE2:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 1\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE2:\n\n");
    fprintf(ctx->fp,
	".LSFDE3:\n"
	"\t.long .LEFDE3-.LASFDE3\n"
	".LASFDE3:\n"
	"\t.long .LASFDE3-.Lframe2\n"
	"\t.long lj_vm_ffi_call-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
#if LJ_64
	"\t.byte 0xe\n\t.uleb128 16\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0xd\n\t.uleb128 0x6\n"		/* def_cfa_register rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
#else
	"\t.byte 0xe\n\t.uleb128 8\n"		/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0xd\n\t.uleb128 0x5\n"		/* def_cfa_register ebp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE3:\n\n", (int)ctx->codesz - fcofs);
#endif
#endif
    break;
#if !LJ_NO_UNWIND
  /* Mental note: never let Apple design an assembler.
  ** Or a linker. Or a plastic case. But I digress.
  */
  case BUILD_machasm: {
#if LJ_HASFFI
    int fcsize = 0;
#endif
    int i;
    fprintf(ctx->fp, "\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n");
    fprintf(ctx->fp,
	"EH_frame1:\n"
	"\t.set L$set$x,LECIEX-LSCIEX\n"
	"\t.long L$set$x\n"
	"LSCIEX:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.ascii \"zPR\\0\"\n"
	"\t.byte 0x1\n"
	"\t.byte 128-" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 6\n"				/* augmentation length */
	"\t.byte 0x9b\n"			/* indirect|pcrel|sdata4 */
#if LJ_64
	"\t.long _lj_err_unwind_dwarf+4@GOTPCREL\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte " REG_SP "\n\t.byte " SZPTR "\n"
#else
	"\t.long L_lj_err_unwind_dwarf$non_lazy_ptr-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH-O. */
#endif
	"\t.byte 0x80+" REG_RA "\n\t.byte 0x1\n"
	"\t.align " BSZPTR "\n"
	"LECIEX:\n\n");
    for (i = 0; i < ctx->nsym; i++) {
      const char *name = ctx->sym[i].name;
      int32_t size = ctx->sym[i+1].ofs - ctx->sym[i].ofs;
      if (size == 0) continue;
#if LJ_HASFFI
      if (!strcmp(name, "_lj_vm_ffi_call")) { fcsize = size; continue; }
#endif
      fprintf(ctx->fp,
	  "%s.eh:\n"
	  "LSFDE%d:\n"
	  "\t.set L$set$%d,LEFDE%d-LASFDE%d\n"
	  "\t.long L$set$%d\n"
	  "LASFDE%d:\n"
	  "\t.long LASFDE%d-EH_frame1\n"
	  "\t.long %s-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"				/* augmentation length */
	  "\t.byte 0xe\n\t.byte %d\n"		/* def_cfa_offset */
#if LJ_64
	  "\t.byte 0x86\n\t.byte 0x2\n"		/* offset rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset rbx */
	  "\t.byte 0x8f\n\t.byte 0x4\n"		/* offset r15 */
	  "\t.byte 0x8e\n\t.byte 0x5\n"		/* offset r14 */
#else
	  "\t.byte 0x84\n\t.byte 0x2\n"		/* offset ebp (4 for MACH-O)*/
	  "\t.byte 0x87\n\t.byte 0x3\n"		/* offset edi */
	  "\t.byte 0x86\n\t.byte 0x4\n"		/* offset esi */
	  "\t.byte 0x83\n\t.byte 0x5\n"		/* offset ebx */
#endif
	  "\t.align " BSZPTR "\n"
	  "LEFDE%d:\n\n",
	  name, i, i, i, i, i, i, i, name, size, CFRAME_SIZE, i);
    }
#if LJ_HASFFI
    if (fcsize) {
      fprintf(ctx->fp,
	  "EH_frame2:\n"
	  "\t.set L$set$y,LECIEY-LSCIEY\n"
	  "\t.long L$set$y\n"
	  "LSCIEY:\n"
	  "\t.long 0\n"
	  "\t.byte 0x1\n"
	  "\t.ascii \"zR\\0\"\n"
	  "\t.byte 0x1\n"
	  "\t.byte 128-" SZPTR "\n"
	  "\t.byte " REG_RA "\n"
	  "\t.byte 1\n"				/* augmentation length */
#if LJ_64
	  "\t.byte 0x1b\n"			/* pcrel|sdata4 */
	  "\t.byte 0xc\n\t.byte " REG_SP "\n\t.byte " SZPTR "\n"
#else
	  "\t.byte 0x1b\n"			/* pcrel|sdata4 */
	  "\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH. */
#endif
	  "\t.byte 0x80+" REG_RA "\n\t.byte 0x1\n"
	  "\t.align " BSZPTR "\n"
	  "LECIEY:\n\n");
      fprintf(ctx->fp,
	  "_lj_vm_ffi_call.eh:\n"
	  "LSFDEY:\n"
	  "\t.set L$set$yy,LEFDEY-LASFDEY\n"
	  "\t.long L$set$yy\n"
	  "LASFDEY:\n"
	  "\t.long LASFDEY-EH_frame2\n"
	  "\t.long _lj_vm_ffi_call-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"				/* augmentation length */
#if LJ_64
	  "\t.byte 0xe\n\t.byte 16\n"		/* def_cfa_offset */
	  "\t.byte 0x86\n\t.byte 0x2\n"		/* offset rbp */
	  "\t.byte 0xd\n\t.byte 0x6\n"		/* def_cfa_register rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset rbx */
#else
	  "\t.byte 0xe\n\t.byte 8\n"		/* def_cfa_offset */
	  "\t.byte 0x84\n\t.byte 0x2\n"		/* offset ebp (4 for MACH-O)*/
	  "\t.byte 0xd\n\t.byte 0x4\n"		/* def_cfa_register ebp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset ebx */
#endif
	  "\t.align " BSZPTR "\n"
	  "LEFDEY:\n\n", fcsize);
    }
#endif
#if !LJ_64
    fprintf(ctx->fp,
      "\t.non_lazy_symbol_pointer\n"
      "L_lj_err_unwind_dwarf$non_lazy_ptr:\n"
      ".indirect_symbol _lj_err_unwind_dwarf\n"
      ".long 0\n\n");
    fprintf(ctx->fp, "\t.section __IMPORT,__jump_table,symbol_stubs,pure_instructions+self_modifying_code,5\n");
    {
      const char *const *xn;
      for (xn = ctx->extnames; *xn; xn++)
	if (strncmp(*xn, LABEL_PREFIX, sizeof(LABEL_PREFIX)-1))
	  fprintf(ctx->fp, "L_%s$stub:\n\t.indirect_symbol _%s\n\t.ascii \"\\364\\364\\364\\364\\364\"\n", *xn, *xn);
    }
#endif
    fprintf(ctx->fp, ".subsections_via_symbols\n");
    }
    break;
#endif
  default:  /* Difficult for other modes. */
    break;
  }
}

